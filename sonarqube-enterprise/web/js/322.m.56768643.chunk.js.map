{"version":3,"sources":["webpack:///./src/main/js/apps/create/project/ManualProjectCreate.css?95f7","webpack:///./src/main/js/apps/create/project/ManualProjectCreate.css","webpack:///./src/main/js/apps/create/project/style.css?00fe","webpack:///./src/main/js/apps/create/project/style.css","webpack:///./src/main/js/api/alm-integrations.ts","webpack:///./src/main/js/apps/create/project/AzurePersonalAccessTokenForm.tsx","webpack:///./src/main/js/apps/create/project/types.ts","webpack:///./src/main/js/apps/create/project/AzureProjectAccordion.tsx","webpack:///./src/main/js/apps/create/project/AzureProjectsList.tsx","webpack:///./src/main/js/apps/create/project/CreateProjectPageHeader.tsx","webpack:///./src/main/js/apps/create/project/WrongBindingCountAlert.tsx","webpack:///./src/main/js/apps/create/project/AzureProjectCreateRenderer.tsx","webpack:///./src/main/js/apps/create/project/AzureProjectCreate.tsx","webpack:///./src/main/js/apps/create/project/BitbucketCloudSearchForm.tsx","webpack:///./src/main/js/apps/create/project/PersonalAccessTokenForm.tsx","webpack:///./src/main/js/apps/create/project/BitbucketCloudProjectCreateRender.tsx","webpack:///./src/main/js/apps/create/project/BitbucketCloudProjectCreate.tsx","webpack:///./src/main/js/apps/create/project/BitbucketProjectAccordion.tsx","webpack:///./src/main/js/apps/create/project/BitbucketRepositories.tsx","webpack:///./src/main/js/apps/create/project/BitbucketSearchResults.tsx","webpack:///./src/main/js/apps/create/project/BitbucketImportRepositoryForm.tsx","webpack:///./src/main/js/apps/create/project/BitbucketProjectCreateRenderer.tsx","webpack:///./src/main/js/apps/create/project/BitbucketProjectCreate.tsx","webpack:///./src/main/js/apps/create/project/constants.ts","webpack:///./src/main/js/apps/create/project/CreateProjectModeSelection.tsx","webpack:///./src/main/js/apps/create/project/GitHubProjectCreateRenderer.tsx","webpack:///./src/main/js/apps/create/project/GitHubProjectCreate.tsx","webpack:///./src/main/js/apps/create/project/GitlabProjectSelectionForm.tsx","webpack:///./src/main/js/apps/create/project/GitlabProjectCreateRenderer.tsx","webpack:///./src/main/js/apps/create/project/GitlabProjectCreate.tsx","webpack:///./src/main/js/apps/create/project/ManualProjectCreate.tsx","webpack:///./src/main/js/apps/create/project/CreateProjectPage.tsx","webpack:///./src/main/js/app/components/a11y/A11ySkipTarget.tsx","webpack:///./src/main/js/components/hoc/whenLoggedIn.tsx","webpack:///./src/main/js/components/common/ProjectKeyInput.tsx","webpack:///./src/main/js/helpers/projects.ts"],"names":["api","content","__esModule","default","module","i","options","exported","locals","exports","___CSS_LOADER_API_IMPORT___","push","setAlmPersonalAccessToken","almSetting","pat","username","catch","throwGlobalError","checkPersonalAccessTokenIsValid","then","status","async","response","error","getAzurePatUrl","url","replace","AzurePersonalAccessTokenForm","props","alm","submitting","validationFailed","touched","setTouched","token","setToken","isInvalid","errorMessage","className","id","defaultMessage","values","link","href","rel","target","scope","onSubmit","e","preventDefault","onPersonalAccessTokenCreate","isValid","label","required","autoFocus","minLength","name","onChange","value","type","disabled","loading","CreateProjectModes","highlight","text","term","underline","toLowerCase","includes","pre","found","post","split","RegExp","AzureProjectAccordion","importing","startsOpen","project","repositories","searchQuery","selectedRepository","open","setOpen","page","setPage","limitedRepositories","slice","isSelected","repo","projectName","onClick","onOpen","title","description","length","map","key","sqProjectKey","fill","green","size","to","sqProjectName","checked","onCheck","onSelectRepository","count","total","loadMore","p","Alert","variant","pathname","query","mode","AzureDevOps","resetPat","AzureProjectsList","loadingRepositories","projects","searchResults","filteredProjects","filter","undefined","displayedProjects","keySuffix","Boolean","onOpenProject","CreateProjectPageHeader","additionalActions","WrongBindingCountAlert","canAdmin","AzureProjectCreateRenderer","searching","settings","showPersonalAccessTokenForm","submittingToken","tokenValidationFailed","onImportRepository","alt","height","src","Azure","onSearch","placeholder","super","mounted","fetchInitialData","this","setState","patIsValid","checkPersonalAccessToken","fetchAzureProjects","state","firstProjectName","repos","fetchAzureRepositories","Promise","resolve","getAzureRepositories","cleanUrl","location","router","handleOpenProject","projectKey","projectRepos","handleSearchRepositories","results","searchAzureRepositories","handleImportRepository","createdProject","repositoryName","onProjectCreate","handleSelectRepository","handlePersonalAccessTokenCreate","prevProps","loadingBindings","BitbucketCloudSearchForm","importingSlug","isLastPage","loadingMore","repository","uuid","overlay","slug","qualifier","Project","workspace","onImport","onLoadMore","BitbucketCloud","getPatUrl","BitbucketServer","endsWith","handleUsernameChange","event","handlePasswordChange","password","handleSubmit","checkingPat","onPersonalAccessTokenCreated","validationErrorMessage","suffixTranslationKey","canSubmit","submitButtonDiabled","display","perm","GitLab","BitbucketCloudProjectCreateRenderer","handlePersonalAccessTokenCreated","fetchData","handleError","projectsPaging","pageIndex","pageSize","handleSearch","handleLoadMore","handleImport","repositorySlug","result","importBitbucketCloudRepository","more","ps","searchForBitbucketCloudRepositories","BitbucketProjectAccordion","disableRepositories","showingAllRepositories","repositoryCount","String","BitbucketRepositories","projectRepositories","openProjectKeys","setOpenProjectKeys","allAreExpanded","isOpen","allShown","handleClick","BitbucketSearchResults","some","r","filteredProjectKeys","filteredSearchResults","BitbucketImportRepositoryForm","BitbucketProjectCreateRenderer","bitbucketSetting","fetchBitbucketProjects","fetchBitbucketRepositories","all","filteredRepositories","reduce","acc","bitbucketSettings","renderAlmOption","last","almCounts","appState","hasBitbucketCloudConf","isBitbucketOption","hasConfig","hasTooManyConfig","onConfigMode","onSelectMode","style","lineHeight","withAppState","almTotalCount","Object","prev","cur","GitHub","Manual","orgToOption","organizations","q","o","GitHubProjectCreateRenderer","loadingOrganizations","selectedOrganization","defaultOptions","minimumQueryLength","onSelect","onSelectOrganization","repositoryPaging","isDisabled","renderRepositoryList","triggerSearch","fetchRepositories","organizationKey","handleSelectOrganization","find","organization","repositoryKey","initialize","code","fetchOrganizations","redirectToGithub","clientId","queryParams","param","join","instanceRootUrl","window","getGithubOrganizations","params","data","getGithubRepositories","paging","_","GitlabProjectSelectionForm","importingGitlabProjectId","pathSlug","pathName","GitlabProjectCreateRenderer","fetchProjects","getGitlabProjects","doImport","gitlabProjectId","importGitlabProject","checkFreeKey","validatingProjectKey","component","alreadyExist","projectKeyError","handleFormSubmit","trim","handleProjectKeyChange","fromUI","validateKey","projectKeyTouched","handleProjectNameChange","projectNameError","validateName","projectNameTouched","sanitizedProjectKey","Valid","branchesEnabled","projectNameIsInvalid","projectNameIsValid","maxLength","currentTarget","ProjectKeyInput","onProjectKeyChange","validating","PROJECT_MODE_FOR_ALM_KEY","azureSettings","bitbucketCloudSettings","githubSettings","gitlabSettings","fetchAlmBindings","almSettings","s","handleModeSelect","handleModeConfig","creatingAlmDefinition","handleProjectCreate","handleOnCancelCreation","handleAfterSubmit","createdAlmDefinition","titleTemplate","A11ySkipTarget","anchor","renderProjectCreation","AlmBindingDefinitionForm","alreadyHaveInstanceConfigured","onCancel","afterSubmit","enforceValidation","whenLoggedIn","Consumer","addA11ySkipLink","removeA11ySkipLink","A11ySkipTargetInner","getLink","weight","WrappedComponent","Wrapper","currentUser","displayName","help","autofocus","PROJECT_KEY_REGEX","PROJECT_KEY_INVALID_CHARACTERS","validateProjectKey","Empty","TooLong","test","OnlyDigits","InvalidChar"],"mappings":"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","file":"js/322.m.56768643.chunk.js","sourcesContent":["var api = require(\"!../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../../node_modules/css-loader/dist/cjs.js??ref--6-1!../../../../../../node_modules/postcss-loader/src/index.js??postcss!./ManualProjectCreate.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\nvar exported = content.locals ? content.locals : {};\n\n\n\nmodule.exports = exported;","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \".manual-project-create{max-width:700px}.manual-project-create .button{margin-top:8px}\", \"\"]);\n// Exports\nmodule.exports = exports;\n","var api = require(\"!../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../../node_modules/css-loader/dist/cjs.js??ref--6-1!../../../../../../node_modules/postcss-loader/src/index.js??postcss!./style.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\nvar exported = content.locals ? content.locals : {};\n\n\n\nmodule.exports = exported;","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \"#create-project{padding-top:0!important}#create-project header{padding-top:20px;background-color:#f3f3f3;position:-webkit-sticky;position:sticky;top:48px;z-index:50}.create-project-mode-type-alm.disabled img{filter:grayscale(100%)}.create-project-manual{display:flex!important;justify-content:space-between}.create-project-azdo-repo{width:410px;min-height:40px;box-sizing:border-box;margin-right:auto}.create-project-import-bbs .open .boxed-group-header{border-bottom:1px solid #e6e6e6}.create-project-import-bbs .boxed-group-inner{padding-top:24px}.create-project-import-bbs-repo{width:250px;min-height:40px}.create-project-github-repository{box-sizing:border-box;width:33.33%}.create-project-github-repository .notice{display:block;position:absolute}.create-project-github-repository .notice svg{color:#0a0}.create-project-import table>tbody>tr>td{vertical-align:middle}.create-project-import .project-name,.create-project-import .project-path{max-width:400px}.create-project-import .sq-project-link{max-width:300px}.create-project-import .already-set-up svg{color:#0a0}\", \"\"]);\n// Exports\nmodule.exports = exports;\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { get, getJSON, parseError, post, postJSON } from 'sonar-ui-common/helpers/request';\nimport throwGlobalError from '../app/utils/throwGlobalError';\nimport {\n  AzureProject,\n  AzureRepository,\n  BitbucketCloudRepository,\n  BitbucketProject,\n  BitbucketRepository,\n  GithubOrganization,\n  GithubRepository,\n  GitlabProject\n} from '../types/alm-integration';\nimport { ProjectBase } from './components';\n\nexport function setAlmPersonalAccessToken(\n  almSetting: string,\n  pat: string,\n  username?: string\n): Promise<void> {\n  return post('/api/alm_integrations/set_pat', { almSetting, pat, username }).catch(\n    throwGlobalError\n  );\n}\n\nexport function checkPersonalAccessTokenIsValid(\n  almSetting: string\n): Promise<{ status: boolean; error?: string }> {\n  return get('/api/alm_integrations/check_pat', { almSetting })\n    .then(() => ({ status: true }))\n    .catch(async (response: Response) => {\n      if (response.status === 400) {\n        const error = await parseError(response);\n        return { status: false, error };\n      }\n      return throwGlobalError(response);\n    });\n}\n\nexport function getAzureProjects(almSetting: string): Promise<{ projects: AzureProject[] }> {\n  return getJSON('/api/alm_integrations/list_azure_projects', { almSetting }).catch(\n    throwGlobalError\n  );\n}\n\nexport function getAzureRepositories(\n  almSetting: string,\n  projectName: string\n): Promise<{ repositories: AzureRepository[] }> {\n  return getJSON('/api/alm_integrations/search_azure_repos', { almSetting, projectName }).catch(\n    throwGlobalError\n  );\n}\n\nexport function searchAzureRepositories(\n  almSetting: string,\n  searchQuery: string\n): Promise<{ repositories: AzureRepository[] }> {\n  return getJSON('/api/alm_integrations/search_azure_repos', { almSetting, searchQuery }).catch(\n    throwGlobalError\n  );\n}\n\nexport function importAzureRepository(\n  almSetting: string,\n  projectName: string,\n  repositoryName: string\n): Promise<{ project: ProjectBase }> {\n  return postJSON('/api/alm_integrations/import_azure_project', {\n    almSetting,\n    projectName,\n    repositoryName\n  }).catch(throwGlobalError);\n}\n\nexport function getBitbucketServerProjects(\n  almSetting: string\n): Promise<{ projects: BitbucketProject[] }> {\n  return getJSON('/api/alm_integrations/list_bitbucketserver_projects', { almSetting });\n}\n\nexport function getBitbucketServerRepositories(\n  almSetting: string,\n  projectName: string\n): Promise<{\n  isLastPage: boolean;\n  repositories: BitbucketRepository[];\n}> {\n  return getJSON('/api/alm_integrations/search_bitbucketserver_repos', {\n    almSetting,\n    projectName\n  });\n}\n\nexport function importBitbucketServerProject(\n  almSetting: string,\n  projectKey: string,\n  repositorySlug: string\n): Promise<{ project: ProjectBase }> {\n  return postJSON('/api/alm_integrations/import_bitbucketserver_project', {\n    almSetting,\n    projectKey,\n    repositorySlug\n  }).catch(throwGlobalError);\n}\n\nexport function searchForBitbucketServerRepositories(\n  almSetting: string,\n  repositoryName: string\n): Promise<{\n  isLastPage: boolean;\n  repositories: BitbucketRepository[];\n}> {\n  return getJSON('/api/alm_integrations/search_bitbucketserver_repos', {\n    almSetting,\n    repositoryName\n  });\n}\n\nexport function searchForBitbucketCloudRepositories(\n  almSetting: string,\n  repositoryName: string,\n  pageSize: number,\n  page?: number\n): Promise<{\n  isLastPage: boolean;\n  repositories: BitbucketCloudRepository[];\n}> {\n  return getJSON('/api/alm_integrations/search_bitbucketcloud_repos', {\n    almSetting,\n    repositoryName,\n    p: page,\n    ps: pageSize\n  });\n}\n\nexport function getGithubClientId(almSetting: string): Promise<{ clientId?: string }> {\n  return getJSON('/api/alm_integrations/get_github_client_id', { almSetting });\n}\n\nexport function importBitbucketCloudRepository(\n  almSetting: string,\n  repositorySlug: string\n): Promise<{ project: ProjectBase }> {\n  return postJSON('/api/alm_integrations/import_bitbucketcloud_repo', {\n    almSetting,\n    repositorySlug\n  }).catch(throwGlobalError);\n}\n\nexport function importGithubRepository(\n  almSetting: string,\n  organization: string,\n  repositoryKey: string\n): Promise<{ project: ProjectBase }> {\n  return postJSON('/api/alm_integrations/import_github_project', {\n    almSetting,\n    organization,\n    repositoryKey\n  }).catch(throwGlobalError);\n}\n\nexport function getGithubOrganizations(\n  almSetting: string,\n  token: string\n): Promise<{ organizations: GithubOrganization[] }> {\n  return getJSON('/api/alm_integrations/list_github_organizations', {\n    almSetting,\n    token\n  }).catch((response?: Response) => {\n    if (response && response.status !== 400) {\n      throwGlobalError(response);\n    }\n  });\n}\n\nexport function getGithubRepositories(data: {\n  almSetting: string;\n  organization: string;\n  pageSize: number;\n  page?: number;\n  query?: string;\n}): Promise<{ repositories: GithubRepository[]; paging: T.Paging }> {\n  const { almSetting, organization, pageSize, page = 1, query } = data;\n  return getJSON('/api/alm_integrations/list_github_repositories', {\n    almSetting,\n    organization,\n    p: page,\n    ps: pageSize,\n    q: query || undefined\n  }).catch(throwGlobalError);\n}\n\nexport function getGitlabProjects(data: {\n  almSetting: string;\n  page?: number;\n  pageSize?: number;\n  query?: string;\n}): Promise<{ projects: GitlabProject[]; projectsPaging: T.Paging }> {\n  const { almSetting, pageSize, page, query } = data;\n  return getJSON('/api/alm_integrations/search_gitlab_repos', {\n    almSetting,\n    projectName: query || undefined,\n    p: page,\n    ps: pageSize\n  })\n    .then(({ repositories, paging }) => ({ projects: repositories, projectsPaging: paging }))\n    .catch(throwGlobalError);\n}\n\nexport function importGitlabProject(data: {\n  almSetting: string;\n  gitlabProjectId: string;\n}): Promise<{ project: ProjectBase }> {\n  const { almSetting, gitlabProjectId } = data;\n  return postJSON('/api/alm_integrations/import_gitlab_project', {\n    almSetting,\n    gitlabProjectId\n  }).catch(throwGlobalError);\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as classNames from 'classnames';\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { SubmitButton } from 'sonar-ui-common/components/controls/buttons';\nimport ValidationInput from 'sonar-ui-common/components/controls/ValidationInput';\nimport DetachIcon from 'sonar-ui-common/components/icons/DetachIcon';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { AlmSettingsInstance } from '../../../types/alm-settings';\n\nexport interface AzurePersonalAccessTokenFormProps {\n  almSetting: AlmSettingsInstance;\n  onPersonalAccessTokenCreate: (token: string) => void;\n  submitting?: boolean;\n  validationFailed: boolean;\n}\n\nfunction getAzurePatUrl(url: string) {\n  return `${url.replace(/\\/$/, '')}/_usersSettings/tokens`;\n}\n\nexport default function AzurePersonalAccessTokenForm(props: AzurePersonalAccessTokenFormProps) {\n  const {\n    almSetting: { alm, url },\n    submitting = false,\n    validationFailed\n  } = props;\n\n  const [touched, setTouched] = React.useState(false);\n  React.useEffect(() => {\n    setTouched(false);\n  }, [submitting]);\n\n  const [token, setToken] = React.useState('');\n\n  const isInvalid = (validationFailed && !touched) || (touched && !token);\n\n  let errorMessage;\n  if (!token) {\n    errorMessage = translate('onboarding.create_project.pat_form.pat_required');\n  } else if (isInvalid) {\n    errorMessage = translate('onboarding.create_project.pat_incorrect', alm);\n  }\n\n  return (\n    <div className=\"boxed-group abs-width-600\">\n      <div className=\"boxed-group-inner\">\n        <h2>{translate('onboarding.create_project.pat_form.title', alm)}</h2>\n\n        <div className=\"big-spacer-top big-spacer-bottom\">\n          <FormattedMessage\n            id=\"onboarding.create_project.pat_help.instructions\"\n            defaultMessage={translate('onboarding.create_project.pat_help.instructions', alm)}\n            values={{\n              link: url ? (\n                <a\n                  className=\"link-with-icon\"\n                  href={getAzurePatUrl(url)}\n                  rel=\"noopener noreferrer\"\n                  target=\"_blank\">\n                  <DetachIcon className=\"little-spacer-right\" />\n                  <span>\n                    {translate('onboarding.create_project.pat_help.instructions.link', alm)}\n                  </span>\n                </a>\n              ) : (\n                translate('onboarding.create_project.pat_help.instructions.link', alm)\n              ),\n              scope: (\n                <strong>\n                  <em>Code (Read & Write)</em>\n                </strong>\n              )\n            }}\n          />\n        </div>\n\n        <form\n          onSubmit={(e: React.SyntheticEvent<HTMLFormElement>) => {\n            e.preventDefault();\n            props.onPersonalAccessTokenCreate(token);\n          }}>\n          <ValidationInput\n            error={errorMessage}\n            id=\"personal_access_token\"\n            isInvalid={isInvalid}\n            isValid={false}\n            label={translate('onboarding.create_project.enter_pat')}\n            required={true}>\n            <input\n              autoFocus={true}\n              className={classNames('width-100 little-spacer-bottom', {\n                'is-invalid': isInvalid\n              })}\n              id=\"personal_access_token\"\n              minLength={1}\n              name=\"personal_access_token\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                setToken(e.target.value);\n                setTouched(true);\n              }}\n              type=\"text\"\n              value={token}\n            />\n          </ValidationInput>\n\n          <SubmitButton disabled={isInvalid || submitting || !touched}>\n            {translate('onboarding.create_project.pat_form.list_repositories')}\n          </SubmitButton>\n          <DeferredSpinner className=\"spacer-left\" loading={submitting} />\n        </form>\n      </div>\n    </div>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nexport enum CreateProjectModes {\n  Manual = 'manual',\n  AzureDevOps = 'azure',\n  BitbucketServer = 'bitbucket',\n  BitbucketCloud = 'bitbucketcloud',\n  GitHub = 'github',\n  GitLab = 'gitlab'\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as classNames from 'classnames';\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from 'react-router';\nimport BoxedGroupAccordion from 'sonar-ui-common/components/controls/BoxedGroupAccordion';\nimport ListFooter from 'sonar-ui-common/components/controls/ListFooter';\nimport Radio from 'sonar-ui-common/components/controls/Radio';\nimport CheckIcon from 'sonar-ui-common/components/icons/CheckIcon';\nimport { Alert } from 'sonar-ui-common/components/ui/Alert';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { colors } from '../../../app/theme';\nimport { getProjectUrl } from '../../../helpers/urls';\nimport { AzureProject, AzureRepository } from '../../../types/alm-integration';\nimport { CreateProjectModes } from './types';\n\nexport interface AzureProjectAccordionProps {\n  importing: boolean;\n  loading: boolean;\n  onOpen: (key: string) => void;\n  onSelectRepository: (repository: AzureRepository) => void;\n  project: AzureProject;\n  repositories?: AzureRepository[];\n  searchQuery?: string;\n  selectedRepository?: AzureRepository;\n  startsOpen: boolean;\n}\n\nconst PAGE_SIZE = 30;\n\nfunction highlight(text: string, term?: string, underline = false) {\n  if (!term || !text.toLowerCase().includes(term.toLowerCase())) {\n    return text;\n  }\n\n  // Capture only the first occurence by using a capturing group to get\n  // everything after the first occurence\n  const [pre, found, post] = text.split(new RegExp(`(${term})(.*)`, 'i'));\n  return (\n    <>\n      {pre}\n      <strong className={classNames({ underline })}>{found}</strong>\n      {post}\n    </>\n  );\n}\n\nexport default function AzureProjectAccordion(props: AzureProjectAccordionProps) {\n  const {\n    importing,\n    loading,\n    startsOpen,\n    project,\n    repositories = [],\n    searchQuery,\n    selectedRepository\n  } = props;\n\n  const [open, setOpen] = React.useState(startsOpen);\n  const handleClick = () => {\n    if (!open) {\n      props.onOpen(project.name);\n    }\n    setOpen(!open);\n  };\n\n  const [page, setPage] = React.useState(1);\n  const limitedRepositories = repositories.slice(0, page * PAGE_SIZE);\n\n  const isSelected = (repo: AzureRepository) =>\n    selectedRepository?.projectName === project.name && selectedRepository.name === repo.name;\n\n  return (\n    <BoxedGroupAccordion\n      className={classNames('big-spacer-bottom', {\n        open\n      })}\n      onClick={handleClick}\n      open={open}\n      title={<h3 title={project.description}>{highlight(project.name, searchQuery, true)}</h3>}>\n      {open && (\n        <DeferredSpinner loading={loading}>\n          {/* The extra loading guard is to prevent the flash of the Alert */}\n          {!loading && repositories.length === 0 ? (\n            <Alert variant=\"warning\">\n              <FormattedMessage\n                defaultMessage={translate('onboarding.create_project.azure.no_repositories')}\n                id=\"onboarding.create_project.azure.no_repositories\"\n                values={{\n                  link: (\n                    <Link\n                      to={{\n                        pathname: '/projects/create',\n                        query: { mode: CreateProjectModes.AzureDevOps, resetPat: 1 }\n                      }}>\n                      {translate('onboarding.create_project.update_your_token')}\n                    </Link>\n                  )\n                }}\n              />\n            </Alert>\n          ) : (\n            <>\n              <div className=\"display-flex-wrap\">\n                {limitedRepositories.map(repo => (\n                  <div\n                    className=\"create-project-azdo-repo display-flex-start spacer-bottom padded-right\"\n                    key={repo.name}>\n                    {repo.sqProjectKey ? (\n                      <>\n                        <CheckIcon className=\"spacer-right\" fill={colors.green} size={14} />\n                        <div className=\"overflow-hidden\">\n                          <div className=\"little-spacer-bottom text-ellipsis\">\n                            <Link to={getProjectUrl(repo.sqProjectKey)} title={repo.sqProjectName}>\n                              {highlight(repo.sqProjectName || repo.name, searchQuery)}\n                            </Link>\n                          </div>\n                          <em>{translate('onboarding.create_project.repository_imported')}</em>\n                        </div>\n                      </>\n                    ) : (\n                      <Radio\n                        checked={isSelected(repo)}\n                        className=\"overflow-hidden\"\n                        disabled={importing}\n                        onCheck={() => props.onSelectRepository(repo)}\n                        value={repo.name}>\n                        <span className=\"text-ellipsis\" title={repo.name}>\n                          {highlight(repo.name, searchQuery)}\n                        </span>\n                      </Radio>\n                    )}\n                  </div>\n                ))}\n              </div>\n              <ListFooter\n                count={limitedRepositories.length}\n                total={repositories.length}\n                loadMore={() => setPage(p => p + 1)}\n              />\n            </>\n          )}\n        </DeferredSpinner>\n      )}\n    </BoxedGroupAccordion>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from 'react-router';\nimport ListFooter from 'sonar-ui-common/components/controls/ListFooter';\nimport { Alert } from 'sonar-ui-common/components/ui/Alert';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { AzureProject, AzureRepository } from '../../../types/alm-integration';\nimport AzureProjectAccordion from './AzureProjectAccordion';\nimport { CreateProjectModes } from './types';\n\nexport interface AzureProjectsListProps {\n  importing: boolean;\n  loadingRepositories: T.Dict<boolean>;\n  onOpenProject: (key: string) => void;\n  onSelectRepository: (repository: AzureRepository) => void;\n  projects?: AzureProject[];\n  repositories: T.Dict<AzureRepository[]>;\n  searchResults?: T.Dict<AzureRepository[]>;\n  searchQuery?: string;\n  selectedRepository?: AzureRepository;\n}\n\nconst PAGE_SIZE = 10;\n\nexport default function AzureProjectsList(props: AzureProjectsListProps) {\n  const {\n    importing,\n    loadingRepositories,\n    projects = [],\n    repositories,\n    searchResults,\n    searchQuery,\n    selectedRepository\n  } = props;\n\n  const [page, setPage] = React.useState(1);\n\n  const filteredProjects = searchResults\n    ? projects.filter(p => searchResults[p.name] !== undefined)\n    : projects;\n\n  if (filteredProjects.length === 0) {\n    return (\n      <Alert className=\"spacer-top\" variant=\"warning\">\n        {searchResults ? (\n          translate('onboarding.create_project.azure.no_results')\n        ) : (\n          <FormattedMessage\n            defaultMessage={translate('onboarding.create_project.azure.no_projects')}\n            id=\"onboarding.create_project.azure.no_projects\"\n            values={{\n              link: (\n                <Link\n                  to={{\n                    pathname: '/projects/create',\n                    query: { mode: CreateProjectModes.AzureDevOps, resetPat: 1 }\n                  }}>\n                  {translate('onboarding.create_project.update_your_token')}\n                </Link>\n              )\n            }}\n          />\n        )}\n      </Alert>\n    );\n  }\n\n  const displayedProjects = filteredProjects.slice(0, page * PAGE_SIZE);\n\n  // Add a suffix to the key to force react to not reuse AzureProjectAccordions between\n  // search results and project exploration\n  const keySuffix = searchResults ? ' - result' : '';\n\n  return (\n    <div>\n      {displayedProjects.map((p, i) => (\n        <AzureProjectAccordion\n          key={`${p.name}${keySuffix}`}\n          importing={importing}\n          loading={Boolean(loadingRepositories[p.name])}\n          onOpen={props.onOpenProject}\n          onSelectRepository={props.onSelectRepository}\n          project={p}\n          repositories={searchResults ? searchResults[p.name] : repositories[p.name]}\n          selectedRepository={selectedRepository}\n          searchQuery={searchQuery}\n          startsOpen={searchResults !== undefined || i === 0}\n        />\n      ))}\n\n      <ListFooter\n        count={displayedProjects.length}\n        loadMore={() => setPage(p => p + 1)}\n        total={filteredProjects.length}\n      />\n    </div>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\n\nexport interface CreateProjectPageHeaderProps {\n  additionalActions?: React.ReactNode;\n  title: React.ReactNode;\n}\n\nexport default function CreateProjectPageHeader(props: CreateProjectPageHeaderProps) {\n  const { additionalActions, title } = props;\n\n  return (\n    <header className=\"huge-spacer-bottom bordered-bottom overflow-hidden\">\n      <h1 className=\"pull-left huge big-spacer-bottom\">{title}</h1>\n\n      {additionalActions}\n    </header>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from 'react-router';\nimport { Alert } from 'sonar-ui-common/components/ui/Alert';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { getGlobalSettingsUrl } from '../../../helpers/urls';\nimport { AlmKeys } from '../../../types/alm-settings';\nimport { ALM_INTEGRATION } from '../../settings/components/AdditionalCategoryKeys';\n\nexport interface WrongBindingCountAlertProps {\n  alm: AlmKeys;\n  canAdmin: boolean;\n}\n\nexport default function WrongBindingCountAlert(props: WrongBindingCountAlertProps) {\n  const { alm, canAdmin } = props;\n\n  return (\n    <Alert variant=\"error\">\n      {canAdmin ? (\n        <FormattedMessage\n          defaultMessage={translate('onboarding.create_project.wrong_binding_count.admin')}\n          id=\"onboarding.create_project.wrong_binding_count.admin\"\n          values={{\n            alm: translate('onboarding.alm', alm),\n            url: (\n              <Link to={getGlobalSettingsUrl(ALM_INTEGRATION)}>{translate('settings.page')}</Link>\n            )\n          }}\n        />\n      ) : (\n        <FormattedMessage\n          defaultMessage={translate('onboarding.create_project.wrong_binding_count')}\n          id=\"onboarding.create_project.wrong_binding_count\"\n          values={{\n            alm: translate('onboarding.alm', alm)\n          }}\n        />\n      )}\n    </Alert>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { Button } from 'sonar-ui-common/components/controls/buttons';\nimport SearchBox from 'sonar-ui-common/components/controls/SearchBox';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { getBaseUrl } from 'sonar-ui-common/helpers/urls';\nimport { AzureProject, AzureRepository } from '../../../types/alm-integration';\nimport { AlmKeys, AlmSettingsInstance } from '../../../types/alm-settings';\nimport AzurePersonalAccessTokenForm from './AzurePersonalAccessTokenForm';\nimport AzureProjectsList from './AzureProjectsList';\nimport CreateProjectPageHeader from './CreateProjectPageHeader';\nimport WrongBindingCountAlert from './WrongBindingCountAlert';\n\nexport interface AzureProjectCreateRendererProps {\n  canAdmin?: boolean;\n  importing: boolean;\n  loading: boolean;\n  loadingRepositories: T.Dict<boolean>;\n  onImportRepository: () => void;\n  onOpenProject: (key: string) => void;\n  onPersonalAccessTokenCreate: (token: string) => void;\n  onSearch: (query: string) => void;\n  onSelectRepository: (repository: AzureRepository) => void;\n  projects?: AzureProject[];\n  repositories: T.Dict<AzureRepository[]>;\n  searching?: boolean;\n  searchResults?: T.Dict<AzureRepository[]>;\n  searchQuery?: string;\n  selectedRepository?: AzureRepository;\n  settings?: AlmSettingsInstance;\n  showPersonalAccessTokenForm?: boolean;\n  submittingToken?: boolean;\n  tokenValidationFailed: boolean;\n}\n\nexport default function AzureProjectCreateRenderer(props: AzureProjectCreateRendererProps) {\n  const {\n    canAdmin,\n    importing,\n    loading,\n    loadingRepositories,\n    projects,\n    repositories,\n    searching,\n    searchResults,\n    searchQuery,\n    selectedRepository,\n    settings,\n    showPersonalAccessTokenForm,\n    submittingToken,\n    tokenValidationFailed\n  } = props;\n\n  return (\n    <>\n      <CreateProjectPageHeader\n        additionalActions={\n          !showPersonalAccessTokenForm && (\n            <div className=\"display-flex-center pull-right\">\n              <DeferredSpinner className=\"spacer-right\" loading={importing} />\n              <Button\n                className=\"button-large button-primary\"\n                disabled={!selectedRepository || importing}\n                onClick={props.onImportRepository}>\n                {translate('onboarding.create_project.import_selected_repo')}\n              </Button>\n            </div>\n          )\n        }\n        title={\n          <span className=\"text-middle\">\n            <img\n              alt=\"\" // Should be ignored by screen readers\n              className=\"spacer-right\"\n              height=\"24\"\n              src={`${getBaseUrl()}/images/alm/azure.svg`}\n            />\n            {translate('onboarding.create_project.azure.title')}\n          </span>\n        }\n      />\n\n      {loading && <i className=\"spinner\" />}\n\n      {!loading && !(settings && settings.url) && (\n        <WrongBindingCountAlert alm={AlmKeys.Azure} canAdmin={!!canAdmin} />\n      )}\n\n      {!loading &&\n        settings &&\n        (showPersonalAccessTokenForm ? (\n          <div className=\"display-flex-justify-center\">\n            <AzurePersonalAccessTokenForm\n              almSetting={settings}\n              onPersonalAccessTokenCreate={props.onPersonalAccessTokenCreate}\n              submitting={submittingToken}\n              validationFailed={tokenValidationFailed}\n            />\n          </div>\n        ) : (\n          <>\n            <div className=\"huge-spacer-bottom\">\n              <SearchBox\n                onChange={props.onSearch}\n                placeholder={translate('onboarding.create_project.search_projects_repositories')}\n              />\n            </div>\n            <DeferredSpinner loading={Boolean(searching)}>\n              <AzureProjectsList\n                importing={importing}\n                loadingRepositories={loadingRepositories}\n                onOpenProject={props.onOpenProject}\n                onSelectRepository={props.onSelectRepository}\n                projects={projects}\n                repositories={repositories}\n                searchResults={searchResults}\n                searchQuery={searchQuery}\n                selectedRepository={selectedRepository}\n              />\n            </DeferredSpinner>\n          </>\n        ))}\n    </>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { groupBy } from 'lodash';\nimport * as React from 'react';\nimport { WithRouterProps } from 'react-router';\nimport {\n  checkPersonalAccessTokenIsValid,\n  getAzureProjects,\n  getAzureRepositories,\n  importAzureRepository,\n  searchAzureRepositories,\n  setAlmPersonalAccessToken\n} from '../../../api/alm-integrations';\nimport { AzureProject, AzureRepository } from '../../../types/alm-integration';\nimport { AlmSettingsInstance } from '../../../types/alm-settings';\nimport AzureCreateProjectRenderer from './AzureProjectCreateRenderer';\n\ninterface Props extends Pick<WithRouterProps, 'location' | 'router'> {\n  canAdmin: boolean;\n  loadingBindings: boolean;\n  onProjectCreate: (projectKey: string) => void;\n  settings: AlmSettingsInstance[];\n}\n\ninterface State {\n  importing: boolean;\n  loading: boolean;\n  loadingRepositories: T.Dict<boolean>;\n  patIsValid?: boolean;\n  projects?: AzureProject[];\n  repositories: T.Dict<AzureRepository[]>;\n  searching?: boolean;\n  searchResults?: T.Dict<AzureRepository[]>;\n  searchQuery?: string;\n  selectedRepository?: AzureRepository;\n  settings?: AlmSettingsInstance;\n  submittingToken?: boolean;\n  tokenValidationFailed: boolean;\n}\n\nexport default class AzureProjectCreate extends React.PureComponent<Props, State> {\n  mounted = false;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      // For now, we only handle a single instance. So we always use the first\n      // one from the list.\n      settings: props.settings[0],\n      importing: false,\n      loading: false,\n      loadingRepositories: {},\n      repositories: {},\n      tokenValidationFailed: false\n    };\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n    this.fetchInitialData();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.settings.length === 0 && this.props.settings.length > 0) {\n      this.setState(\n        { settings: this.props.settings.length === 1 ? this.props.settings[0] : undefined },\n        () => this.fetchInitialData()\n      );\n    }\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  fetchInitialData = async () => {\n    this.setState({ loading: true });\n\n    const patIsValid = await this.checkPersonalAccessToken().catch(() => false);\n\n    let projects: AzureProject[] | undefined;\n    if (patIsValid) {\n      projects = await this.fetchAzureProjects();\n    }\n\n    const { repositories } = this.state;\n\n    let firstProjectName: string;\n\n    if (projects && projects.length > 0) {\n      firstProjectName = projects[0].name;\n\n      this.setState(({ loadingRepositories }) => ({\n        loadingRepositories: { ...loadingRepositories, [firstProjectName]: true }\n      }));\n\n      const repos = await this.fetchAzureRepositories(firstProjectName);\n      repositories[firstProjectName] = repos;\n    }\n\n    if (this.mounted) {\n      this.setState(({ loadingRepositories }) => {\n        if (firstProjectName) {\n          loadingRepositories[firstProjectName] = false;\n        }\n\n        return {\n          patIsValid,\n          loading: false,\n          loadingRepositories: { ...loadingRepositories },\n          projects,\n          repositories\n        };\n      });\n    }\n  };\n\n  fetchAzureProjects = (): Promise<AzureProject[] | undefined> => {\n    const { settings } = this.state;\n\n    if (!settings) {\n      return Promise.resolve(undefined);\n    }\n\n    return getAzureProjects(settings.key).then(({ projects }) => projects);\n  };\n\n  fetchAzureRepositories = (projectName: string): Promise<AzureRepository[]> => {\n    const { settings } = this.state;\n\n    if (!settings) {\n      return Promise.resolve([]);\n    }\n\n    return getAzureRepositories(settings.key, projectName)\n      .then(({ repositories }) => repositories)\n      .catch(() => []);\n  };\n\n  cleanUrl = () => {\n    const { location, router } = this.props;\n    delete location.query.resetPat;\n    router.replace(location);\n  };\n\n  handleOpenProject = async (projectKey: string) => {\n    if (this.state.searchResults) {\n      return;\n    }\n\n    this.setState(({ loadingRepositories }) => ({\n      loadingRepositories: { ...loadingRepositories, [projectKey]: true }\n    }));\n\n    const projectRepos = await this.fetchAzureRepositories(projectKey);\n\n    this.setState(({ loadingRepositories, repositories }) => ({\n      loadingRepositories: { ...loadingRepositories, [projectKey]: false },\n      repositories: { ...repositories, [projectKey]: projectRepos }\n    }));\n  };\n\n  handleSearchRepositories = async (searchQuery: string) => {\n    const { settings } = this.state;\n\n    if (!settings) {\n      return;\n    }\n\n    if (searchQuery.length === 0) {\n      this.setState({ searchResults: undefined, searchQuery: undefined });\n      return;\n    }\n\n    this.setState({ searching: true });\n\n    const results: AzureRepository[] = await searchAzureRepositories(settings.key, searchQuery)\n      .then(({ repositories }) => repositories)\n      .catch(() => []);\n\n    if (this.mounted) {\n      this.setState({\n        searching: false,\n        searchResults: groupBy(results, 'projectName'),\n        searchQuery\n      });\n    }\n  };\n\n  handleImportRepository = async () => {\n    const { selectedRepository, settings } = this.state;\n\n    if (!settings || !selectedRepository) {\n      return;\n    }\n\n    this.setState({ importing: true });\n\n    const createdProject = await importAzureRepository(\n      settings.key,\n      selectedRepository.projectName,\n      selectedRepository.name\n    )\n      .then(({ project }) => project)\n      .catch(() => undefined);\n\n    if (this.mounted) {\n      this.setState({ importing: false });\n      if (createdProject) {\n        this.props.onProjectCreate(createdProject.key);\n      }\n    }\n  };\n\n  handleSelectRepository = (selectedRepository: AzureRepository) => {\n    this.setState({ selectedRepository });\n  };\n\n  checkPersonalAccessToken = () => {\n    const { settings } = this.state;\n\n    if (!settings) {\n      return Promise.resolve(false);\n    }\n\n    return checkPersonalAccessTokenIsValid(settings.key).then(({ status }) => status);\n  };\n\n  handlePersonalAccessTokenCreate = async (token: string) => {\n    const { settings } = this.state;\n\n    if (!settings || token.length < 1) {\n      return;\n    }\n\n    this.setState({ submittingToken: true, tokenValidationFailed: false });\n\n    try {\n      await setAlmPersonalAccessToken(settings.key, token);\n      const patIsValid = await this.checkPersonalAccessToken();\n\n      if (this.mounted) {\n        this.setState({ submittingToken: false, patIsValid, tokenValidationFailed: !patIsValid });\n\n        if (patIsValid) {\n          this.cleanUrl();\n          this.fetchInitialData();\n        }\n      }\n    } catch (e) {\n      if (this.mounted) {\n        this.setState({ submittingToken: false });\n      }\n    }\n  };\n\n  render() {\n    const { canAdmin, loadingBindings, location } = this.props;\n    const {\n      importing,\n      loading,\n      loadingRepositories,\n      patIsValid,\n      projects,\n      repositories,\n      searching,\n      searchResults,\n      searchQuery,\n      selectedRepository,\n      settings,\n      submittingToken,\n      tokenValidationFailed\n    } = this.state;\n\n    return (\n      <AzureCreateProjectRenderer\n        canAdmin={canAdmin}\n        importing={importing}\n        loading={loading || loadingBindings}\n        loadingRepositories={loadingRepositories}\n        onImportRepository={this.handleImportRepository}\n        onOpenProject={this.handleOpenProject}\n        onPersonalAccessTokenCreate={this.handlePersonalAccessTokenCreate}\n        onSearch={this.handleSearchRepositories}\n        onSelectRepository={this.handleSelectRepository}\n        projects={projects}\n        repositories={repositories}\n        searching={searching}\n        searchResults={searchResults}\n        searchQuery={searchQuery}\n        selectedRepository={selectedRepository}\n        settings={settings}\n        showPersonalAccessTokenForm={!patIsValid || Boolean(location.query.resetPat)}\n        submittingToken={submittingToken}\n        tokenValidationFailed={tokenValidationFailed}\n      />\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from 'react-router';\nimport { Button } from 'sonar-ui-common/components/controls/buttons';\nimport SearchBox from 'sonar-ui-common/components/controls/SearchBox';\nimport Tooltip from 'sonar-ui-common/components/controls/Tooltip';\nimport CheckIcon from 'sonar-ui-common/components/icons/CheckIcon';\nimport DetachIcon from 'sonar-ui-common/components/icons/DetachIcon';\nimport QualifierIcon from 'sonar-ui-common/components/icons/QualifierIcon';\nimport { Alert } from 'sonar-ui-common/components/ui/Alert';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { translate, translateWithParameters } from 'sonar-ui-common/helpers/l10n';\nimport { formatMeasure } from 'sonar-ui-common/helpers/measures';\nimport { getProjectUrl } from '../../../helpers/urls';\nimport { BitbucketCloudRepository } from '../../../types/alm-integration';\nimport { ComponentQualifier } from '../../../types/component';\nimport { CreateProjectModes } from './types';\n\nexport interface BitbucketCloudSearchFormProps {\n  importingSlug?: string;\n  isLastPage: boolean;\n  loadingMore: boolean;\n  onImport: (repositorySlug: string) => void;\n  onLoadMore: () => void;\n  onSearch: (searchQuery: string) => void;\n  repositories?: BitbucketCloudRepository[];\n  searching: boolean;\n  searchQuery: string;\n}\n\nfunction getRepositoryUrl(workspace: string, slug: string) {\n  return `https://bitbucket.org/${workspace}/${slug}`;\n}\n\nexport default function BitbucketCloudSearchForm(props: BitbucketCloudSearchFormProps) {\n  const {\n    importingSlug,\n    isLastPage,\n    loadingMore,\n    repositories = [],\n    searching,\n    searchQuery\n  } = props;\n\n  if (repositories.length === 0 && searchQuery.length === 0 && !searching) {\n    return (\n      <Alert className=\"spacer-top\" variant=\"warning\">\n        <FormattedMessage\n          defaultMessage={translate('onboarding.create_project.bitbucketcloud.no_projects')}\n          id=\"onboarding.create_project.bitbucketcloud.no_projects\"\n          values={{\n            link: (\n              <Link\n                to={{\n                  pathname: '/projects/create',\n                  query: { mode: CreateProjectModes.BitbucketCloud, resetPat: 1 }\n                }}>\n                {translate('onboarding.create_project.update_your_token')}\n              </Link>\n            )\n          }}\n        />\n      </Alert>\n    );\n  }\n\n  return (\n    <div className=\"boxed-group big-padded create-project-import\">\n      <SearchBox\n        className=\"spacer\"\n        loading={searching}\n        minLength={3}\n        onChange={props.onSearch}\n        placeholder={translate('onboarding.create_project.search_prompt')}\n      />\n\n      <hr />\n\n      {repositories.length === 0 ? (\n        <div className=\"padded\">{translate('no_results')}</div>\n      ) : (\n        <table className=\"data zebra zebra-hover\">\n          <tbody>\n            {repositories.map(repository => (\n              <tr key={repository.uuid}>\n                <td>\n                  <Tooltip overlay={repository.slug}>\n                    <strong className=\"project-name display-inline-block text-ellipsis\">\n                      {repository.sqProjectKey ? (\n                        <Link to={getProjectUrl(repository.sqProjectKey)}>\n                          <QualifierIcon\n                            className=\"spacer-right\"\n                            qualifier={ComponentQualifier.Project}\n                          />\n                          {repository.name}\n                        </Link>\n                      ) : (\n                        repository.name\n                      )}\n                    </strong>\n                  </Tooltip>\n                  <br />\n                  <Tooltip overlay={repository.projectKey}>\n                    <span className=\"text-muted project-path display-inline-block text-ellipsis\">\n                      {repository.projectKey}\n                    </span>\n                  </Tooltip>\n                </td>\n                <td>\n                  <a\n                    className=\"display-inline-flex-center big-spacer-right\"\n                    href={getRepositoryUrl(repository.workspace, repository.slug)}\n                    rel=\"noopener noreferrer\"\n                    target=\"_blank\">\n                    <DetachIcon className=\"little-spacer-right\" />\n                    {translate('onboarding.create_project.bitbucketcloud.link')}\n                  </a>\n                </td>\n                {repository.sqProjectKey ? (\n                  <td>\n                    <span className=\"display-flex-center display-flex-justify-end already-set-up\">\n                      <CheckIcon className=\"little-spacer-right\" size={12} />\n                      {translate('onboarding.create_project.repository_imported')}\n                    </span>\n                  </td>\n                ) : (\n                  <td className=\"text-right\">\n                    <Button\n                      disabled={Boolean(importingSlug)}\n                      onClick={() => {\n                        props.onImport(repository.slug);\n                      }}>\n                      {translate('onboarding.create_project.set_up')}\n                      {importingSlug === repository.slug && (\n                        <DeferredSpinner className=\"spacer-left\" />\n                      )}\n                    </Button>\n                  </td>\n                )}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n      <footer className=\"spacer-top note text-center\">\n        {isLastPage &&\n          translateWithParameters(\n            'x_of_y_shown',\n            formatMeasure(repositories.length, 'INT', null),\n            formatMeasure(repositories.length, 'INT', null)\n          )}\n        {!isLastPage && (\n          <Button\n            className=\"spacer-left\"\n            disabled={loadingMore}\n            data-test=\"show-more\"\n            onClick={props.onLoadMore}>\n            {translate('show_more')}\n          </Button>\n        )}\n        {loadingMore && <DeferredSpinner className=\"text-bottom spacer-left position-absolute\" />}\n      </footer>\n    </div>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as classNames from 'classnames';\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { SubmitButton } from 'sonar-ui-common/components/controls/buttons';\nimport ValidationInput from 'sonar-ui-common/components/controls/ValidationInput';\nimport { Alert } from 'sonar-ui-common/components/ui/Alert';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { getBaseUrl } from 'sonar-ui-common/helpers/urls';\nimport {\n  checkPersonalAccessTokenIsValid,\n  setAlmPersonalAccessToken\n} from '../../../api/alm-integrations';\nimport { AlmKeys, AlmSettingsInstance } from '../../../types/alm-settings';\n\ninterface Props {\n  almSetting: AlmSettingsInstance;\n  resetPat: boolean;\n  onPersonalAccessTokenCreated: () => void;\n}\n\ninterface State {\n  validationFailed: boolean;\n  validationErrorMessage?: string;\n  touched: boolean;\n  password: string;\n  username?: string;\n  submitting: boolean;\n  checkingPat: boolean;\n}\n\nfunction getPatUrl(alm: AlmKeys, url = '') {\n  if (alm === AlmKeys.BitbucketServer) {\n    return `${url.replace(/\\/$/, '')}/plugins/servlet/access-tokens/add`;\n  } else if (alm === AlmKeys.BitbucketCloud) {\n    return 'https://bitbucket.org/account/settings/app-passwords/new';\n  } else {\n    // GitLab\n    return url.endsWith('/api/v4')\n      ? `${url.replace('/api/v4', '').replace(/\\/$/, '')}/profile/personal_access_tokens`\n      : 'https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html#creating-a-personal-access-token';\n  }\n}\n\nexport default class PersonalAccessTokenForm extends React.PureComponent<Props, State> {\n  mounted = false;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      checkingPat: false,\n      touched: false,\n      password: '',\n      submitting: false,\n      validationFailed: false\n    };\n  }\n\n  async componentDidMount() {\n    const {\n      almSetting: { key },\n      resetPat\n    } = this.props;\n    this.mounted = true;\n\n    // We don't need to check PAT if we want to reset\n    if (!resetPat) {\n      this.setState({ checkingPat: true });\n      const { patIsValid, error } = await checkPersonalAccessTokenIsValid(key)\n        .then(({ status, error }) => ({ patIsValid: status, error }))\n        .catch(() => ({ patIsValid: status, error: translate('default_error_message') }));\n      if (patIsValid) {\n        this.props.onPersonalAccessTokenCreated();\n      }\n      if (this.mounted) {\n        // This is the initial message when no token was provided\n        if (error === `personal access token for '${key}' is missing`) {\n          this.setState({\n            checkingPat: false\n          });\n        } else {\n          this.setState({\n            checkingPat: false,\n            validationFailed: true,\n            validationErrorMessage: error\n          });\n        }\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  handleUsernameChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      touched: true,\n      username: event.target.value\n    });\n  };\n\n  handlePasswordChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      touched: true,\n      password: event.target.value\n    });\n  };\n\n  handleSubmit = async (e: React.SyntheticEvent<HTMLFormElement>) => {\n    const { password, username } = this.state;\n    const {\n      almSetting: { key }\n    } = this.props;\n\n    e.preventDefault();\n    if (password) {\n      this.setState({ submitting: true });\n\n      await setAlmPersonalAccessToken(key, password, username).catch(() => {\n        /* Set will not check pat validity. We need to check again so we will catch issue after */\n      });\n\n      const { status, error } = await checkPersonalAccessTokenIsValid(key)\n        .then(({ status, error }) => ({ status, error }))\n        .catch(() => ({ status: false, error: translate('default_error_message') }));\n\n      if (this.mounted && status) {\n        // Let's reset status,\n        this.setState({\n          checkingPat: false,\n          touched: false,\n          password: '',\n          submitting: false,\n          username: '',\n          validationFailed: false\n        });\n        this.props.onPersonalAccessTokenCreated();\n      } else if (this.mounted) {\n        this.setState({\n          submitting: false,\n          touched: false,\n          validationFailed: true,\n          validationErrorMessage: error\n        });\n      }\n    }\n  };\n\n  render() {\n    const {\n      almSetting: { alm, url }\n    } = this.props;\n    const {\n      checkingPat,\n      submitting,\n      touched,\n      password,\n      username,\n      validationFailed,\n      validationErrorMessage\n    } = this.state;\n\n    if (checkingPat) {\n      return <DeferredSpinner className=\"spacer-left\" loading={true} />;\n    }\n\n    const suffixTranslationKey = alm === AlmKeys.BitbucketCloud ? '.bitbucketcloud' : '';\n\n    const isInvalid = validationFailed && !touched;\n    const canSubmit = Boolean(password) && (alm !== AlmKeys.BitbucketCloud || Boolean(username));\n    const submitButtonDiabled = isInvalid || submitting || !canSubmit;\n\n    const errorMessage =\n      validationErrorMessage ?? translate('onboarding.create_project.pat_incorrect', alm);\n\n    return (\n      <div className=\"display-flex-start\">\n        <form className=\"width-50\" onSubmit={this.handleSubmit}>\n          <h2 className=\"big\">{translate('onboarding.create_project.pat_form.title', alm)}</h2>\n          <p className=\"big-spacer-top big-spacer-bottom\">\n            {translate('onboarding.create_project.pat_form.help', alm)}\n          </p>\n\n          {alm === AlmKeys.BitbucketCloud && (\n            <ValidationInput\n              error={undefined}\n              id=\"enter_username_validation\"\n              isInvalid={false}\n              isValid={false}\n              label={translate('onboarding.create_project.enter_username')}\n              required={true}>\n              <input\n                autoFocus={true}\n                className={classNames('input-super-large', {\n                  'is-invalid': isInvalid\n                })}\n                id=\"username\"\n                minLength={1}\n                name=\"username\"\n                value={username}\n                onChange={this.handleUsernameChange}\n                type=\"text\"\n              />\n            </ValidationInput>\n          )}\n\n          <ValidationInput\n            error={errorMessage}\n            id=\"personal_access_token_validation\"\n            isInvalid={false}\n            isValid={false}\n            label={translate(`onboarding.create_project.enter_pat${suffixTranslationKey}`)}\n            required={true}>\n            <input\n              autoFocus={alm !== AlmKeys.BitbucketCloud}\n              className={classNames('input-super-large', {\n                'is-invalid': isInvalid\n              })}\n              id=\"personal_access_token\"\n              minLength={1}\n              value={password}\n              onChange={this.handlePasswordChange}\n              type=\"text\"\n            />\n          </ValidationInput>\n\n          <ValidationInput\n            error={errorMessage}\n            id=\"personal_access_token_submit\"\n            isInvalid={isInvalid}\n            isValid={false}\n            label={null}>\n            <SubmitButton disabled={submitButtonDiabled}>{translate('save')}</SubmitButton>\n            <DeferredSpinner className=\"spacer-left\" loading={submitting} />\n          </ValidationInput>\n        </form>\n\n        <Alert className=\"big-spacer-left width-50\" display=\"block\" variant=\"info\">\n          {alm === AlmKeys.BitbucketCloud && (\n            <>\n              <h3>\n                {translate(\n                  'onboarding.create_project.pat_help.instructions_username.bitbucketcloud.title'\n                )}\n              </h3>\n              <p className=\"big-spacer-top big-spacer-bottom\">\n                {translate(\n                  'onboarding.create_project.pat_help.instructions_username.bitbucketcloud'\n                )}\n              </p>\n\n              <div className=\"text-middle big-spacer-bottom\">\n                <img\n                  alt=\"\" // Should be ignored by screen readers\n                  className=\"spacer-right\"\n                  height=\"16\"\n                  src={`${getBaseUrl()}/images/alm/${AlmKeys.BitbucketServer}.svg`}\n                />\n                <a\n                  href=\"https://bitbucket.org/account/settings/\"\n                  rel=\"noopener noreferrer\"\n                  target=\"_blank\">\n                  {translate(\n                    'onboarding.create_project.pat_help.instructions_username.bitbucketcloud.link'\n                  )}\n                </a>\n              </div>\n            </>\n          )}\n\n          <h3>{translate(`onboarding.create_project.pat_help${suffixTranslationKey}.title`)}</h3>\n\n          <p className=\"big-spacer-top big-spacer-bottom\">\n            <FormattedMessage\n              id=\"onboarding.create_project.pat_help.instructions\"\n              defaultMessage={translate(\n                `onboarding.create_project.pat_help${suffixTranslationKey}.instructions`\n              )}\n              values={{ alm: translate('onboarding.alm', alm) }}\n            />\n          </p>\n\n          {(url || alm === AlmKeys.BitbucketCloud) && (\n            <div className=\"text-middle\">\n              <img\n                alt=\"\" // Should be ignored by screen readers\n                className=\"spacer-right\"\n                height=\"16\"\n                src={`${getBaseUrl()}/images/alm/${\n                  alm === AlmKeys.BitbucketCloud ? AlmKeys.BitbucketServer : alm\n                }.svg`}\n              />\n              <a href={getPatUrl(alm, url)} rel=\"noopener noreferrer\" target=\"_blank\">\n                {translate(`onboarding.create_project.pat_help${suffixTranslationKey}.link`)}\n              </a>\n            </div>\n          )}\n\n          <p className=\"big-spacer-top big-spacer-bottom\">\n            {translate('onboarding.create_project.pat_help.instructions2', alm)}\n          </p>\n\n          <ul>\n            {alm === AlmKeys.BitbucketServer && (\n              <li>\n                <FormattedMessage\n                  defaultMessage={translate(\n                    'onboarding.create_project.pat_help.bbs_permission_projects'\n                  )}\n                  id=\"onboarding.create_project.pat_help.bbs_permission_projects\"\n                  values={{\n                    perm: (\n                      <strong>\n                        {translate('onboarding.create_project.pat_help.read_permission')}\n                      </strong>\n                    )\n                  }}\n                />\n              </li>\n            )}\n            {(alm === AlmKeys.BitbucketServer || alm === AlmKeys.BitbucketCloud) && (\n              <li>\n                <FormattedMessage\n                  defaultMessage={translate(\n                    'onboarding.create_project.pat_help.bbs_permission_repos'\n                  )}\n                  id=\"onboarding.create_project.pat_help.bbs_permission_repos\"\n                  values={{\n                    perm: (\n                      <strong>\n                        {translate('onboarding.create_project.pat_help.read_permission')}\n                      </strong>\n                    )\n                  }}\n                />\n              </li>\n            )}\n\n            {alm === AlmKeys.GitLab && (\n              <li className=\"spacer-bottom\">\n                <strong>\n                  {translate('onboarding.create_project.pat_help.gitlab.read_api_permission')}\n                </strong>\n              </li>\n            )}\n          </ul>\n        </Alert>\n      </div>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { getBaseUrl } from 'sonar-ui-common/helpers/urls';\nimport { BitbucketCloudRepository } from '../../../types/alm-integration';\nimport { AlmKeys, AlmSettingsInstance } from '../../../types/alm-settings';\nimport BitbucketCloudSearchForm from './BitbucketCloudSearchForm';\nimport CreateProjectPageHeader from './CreateProjectPageHeader';\nimport PersonalAccessTokenForm from './PersonalAccessTokenForm';\nimport WrongBindingCountAlert from './WrongBindingCountAlert';\n\nexport interface BitbucketCloudProjectCreateRendererProps {\n  importingSlug?: string;\n  isLastPage: boolean;\n  canAdmin?: boolean;\n  loading: boolean;\n  loadingMore: boolean;\n  onImport: (repositorySlug: string) => void;\n  onLoadMore: () => void;\n  onPersonalAccessTokenCreated: () => void;\n  onSearch: (searchQuery: string) => void;\n  repositories?: BitbucketCloudRepository[];\n  resetPat: boolean;\n  searching: boolean;\n  searchQuery: string;\n  showPersonalAccessTokenForm: boolean;\n  settings?: AlmSettingsInstance;\n}\n\nexport default function BitbucketCloudProjectCreateRenderer(\n  props: BitbucketCloudProjectCreateRendererProps\n) {\n  const {\n    importingSlug,\n    isLastPage,\n    settings,\n    canAdmin,\n    loading,\n    loadingMore,\n    repositories,\n    resetPat,\n    searching,\n    searchQuery,\n    showPersonalAccessTokenForm\n  } = props;\n\n  return (\n    <>\n      <CreateProjectPageHeader\n        title={\n          <span className=\"text-middle\">\n            <img\n              alt=\"\" // Should be ignored by screen readers\n              className=\"spacer-right\"\n              height=\"24\"\n              src={`${getBaseUrl()}/images/alm/bitbucket.svg`}\n            />\n            {translate('onboarding.create_project.bitbucketcloud.title')}\n          </span>\n        }\n      />\n      {loading && <i className=\"spinner\" />}\n\n      {!loading && !settings && (\n        <WrongBindingCountAlert alm={AlmKeys.BitbucketCloud} canAdmin={!!canAdmin} />\n      )}\n\n      {!loading &&\n        settings &&\n        (showPersonalAccessTokenForm ? (\n          <PersonalAccessTokenForm\n            almSetting={settings}\n            resetPat={resetPat}\n            onPersonalAccessTokenCreated={props.onPersonalAccessTokenCreated}\n          />\n        ) : (\n          <BitbucketCloudSearchForm\n            importingSlug={importingSlug}\n            isLastPage={isLastPage}\n            loadingMore={loadingMore}\n            searchQuery={searchQuery}\n            searching={searching}\n            onImport={props.onImport}\n            onSearch={props.onSearch}\n            onLoadMore={props.onLoadMore}\n            repositories={repositories}\n          />\n        ))}\n    </>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { WithRouterProps } from 'react-router';\nimport {\n  importBitbucketCloudRepository,\n  searchForBitbucketCloudRepositories\n} from '../../../api/alm-integrations';\nimport { BitbucketCloudRepository } from '../../../types/alm-integration';\nimport { AlmSettingsInstance } from '../../../types/alm-settings';\nimport BitbucketCloudProjectCreateRenderer from './BitbucketCloudProjectCreateRender';\n\ninterface Props extends Pick<WithRouterProps, 'location' | 'router'> {\n  canAdmin: boolean;\n  settings: AlmSettingsInstance[];\n  loadingBindings: boolean;\n  onProjectCreate: (projectKey: string) => void;\n}\n\ninterface State {\n  importingSlug?: string;\n  isLastPage?: boolean;\n  loading: boolean;\n  loadingMore: boolean;\n  projectsPaging: Omit<T.Paging, 'total'>;\n  resetPat: boolean;\n  repositories: BitbucketCloudRepository[];\n  searching: boolean;\n  searchQuery: string;\n  settings: AlmSettingsInstance;\n  showPersonalAccessTokenForm: boolean;\n}\n\nexport const BITBUCKET_CLOUD_PROJECTS_PAGESIZE = 30;\nexport default class BitbucketCloudProjectCreate extends React.PureComponent<Props, State> {\n  mounted = false;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      // For now, we only handle a single instance. So we always use the first\n      // one from the list.\n      loading: false,\n      loadingMore: false,\n      resetPat: false,\n      projectsPaging: { pageIndex: 1, pageSize: BITBUCKET_CLOUD_PROJECTS_PAGESIZE },\n      repositories: [],\n      searching: false,\n      searchQuery: '',\n      settings: props.settings[0],\n      showPersonalAccessTokenForm: true\n    };\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.settings.length === 0 && this.props.settings.length > 0) {\n      this.setState({ settings: this.props.settings[0] }, () => this.fetchData());\n    }\n  }\n\n  handlePersonalAccessTokenCreated = async () => {\n    this.setState({ showPersonalAccessTokenForm: false });\n    this.cleanUrl();\n    this.setState({ loading: true });\n    await this.fetchData();\n    this.setState({ loading: false });\n  };\n\n  cleanUrl = () => {\n    const { location, router } = this.props;\n    delete location.query.resetPat;\n    router.replace(location);\n  };\n\n  async fetchData(more = false) {\n    const {\n      settings,\n      searchQuery,\n      projectsPaging: { pageIndex, pageSize },\n      showPersonalAccessTokenForm\n    } = this.state;\n    if (settings && !showPersonalAccessTokenForm) {\n      const { isLastPage, repositories } = await searchForBitbucketCloudRepositories(\n        settings.key,\n        searchQuery,\n        pageSize,\n        pageIndex\n      ).catch(() => {\n        this.handleError();\n        return { isLastPage: undefined, repositories: undefined };\n      });\n      if (this.mounted && isLastPage !== undefined && repositories !== undefined) {\n        if (more) {\n          this.setState(state => ({\n            isLastPage,\n            repositories: [...state.repositories, ...repositories]\n          }));\n        } else {\n          this.setState({ isLastPage, repositories });\n        }\n      }\n    }\n  }\n\n  handleError = () => {\n    if (this.mounted) {\n      this.setState({\n        projectsPaging: { pageIndex: 1, pageSize: BITBUCKET_CLOUD_PROJECTS_PAGESIZE },\n        repositories: [],\n        resetPat: true,\n        showPersonalAccessTokenForm: true\n      });\n    }\n\n    return undefined;\n  };\n\n  handleSearch = (searchQuery: string) => {\n    this.setState(\n      {\n        searching: true,\n        projectsPaging: { pageIndex: 1, pageSize: BITBUCKET_CLOUD_PROJECTS_PAGESIZE },\n        searchQuery\n      },\n      async () => {\n        await this.fetchData();\n        if (this.mounted) {\n          this.setState({ searching: false });\n        }\n      }\n    );\n  };\n\n  handleLoadMore = () => {\n    this.setState(\n      state => ({\n        loadingMore: true,\n        projectsPaging: {\n          pageIndex: state.projectsPaging.pageIndex + 1,\n          pageSize: state.projectsPaging.pageSize\n        }\n      }),\n      async () => {\n        await this.fetchData(true);\n        if (this.mounted) {\n          this.setState({ loadingMore: false });\n        }\n      }\n    );\n  };\n\n  handleImport = async (repositorySlug: string) => {\n    const { settings } = this.state;\n\n    if (!settings) {\n      return;\n    }\n\n    this.setState({ importingSlug: repositorySlug });\n\n    const result = await importBitbucketCloudRepository(settings.key, repositorySlug).catch(\n      () => undefined\n    );\n\n    if (this.mounted) {\n      this.setState({ importingSlug: undefined });\n\n      if (result) {\n        this.props.onProjectCreate(result.project.key);\n      }\n    }\n  };\n\n  render() {\n    const { canAdmin, loadingBindings, location } = this.props;\n    const {\n      importingSlug,\n      isLastPage = true,\n      settings,\n      loading,\n      loadingMore,\n      repositories,\n      showPersonalAccessTokenForm,\n      resetPat,\n      searching,\n      searchQuery\n    } = this.state;\n    return (\n      <BitbucketCloudProjectCreateRenderer\n        importingSlug={importingSlug}\n        isLastPage={isLastPage}\n        settings={settings}\n        canAdmin={canAdmin}\n        loadingMore={loadingMore}\n        loading={loading || loadingBindings}\n        onImport={this.handleImport}\n        onLoadMore={this.handleLoadMore}\n        onPersonalAccessTokenCreated={this.handlePersonalAccessTokenCreated}\n        onSearch={this.handleSearch}\n        repositories={repositories}\n        searching={searching}\n        searchQuery={searchQuery}\n        resetPat={resetPat || Boolean(location.query.resetPat)}\n        showPersonalAccessTokenForm={\n          showPersonalAccessTokenForm || Boolean(location.query.resetPat)\n        }\n      />\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as classNames from 'classnames';\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from 'react-router';\nimport BoxedGroupAccordion from 'sonar-ui-common/components/controls/BoxedGroupAccordion';\nimport Radio from 'sonar-ui-common/components/controls/Radio';\nimport CheckIcon from 'sonar-ui-common/components/icons/CheckIcon';\nimport { Alert } from 'sonar-ui-common/components/ui/Alert';\nimport { translate, translateWithParameters } from 'sonar-ui-common/helpers/l10n';\nimport { colors } from '../../../app/theme';\nimport { getProjectUrl } from '../../../helpers/urls';\nimport { BitbucketProject, BitbucketRepository } from '../../../types/alm-integration';\nimport { CreateProjectModes } from './types';\n\nexport interface BitbucketProjectAccordionProps {\n  disableRepositories: boolean;\n  onClick?: () => void;\n  onSelectRepository: (repo: BitbucketRepository) => void;\n  open: boolean;\n  project?: BitbucketProject;\n  repositories: BitbucketRepository[];\n  selectedRepository?: BitbucketRepository;\n  showingAllRepositories: boolean;\n}\n\nexport default function BitbucketProjectAccordion(props: BitbucketProjectAccordionProps) {\n  const {\n    disableRepositories,\n    open,\n    project,\n    repositories,\n    selectedRepository,\n    showingAllRepositories\n  } = props;\n\n  const repositoryCount = repositories.length;\n\n  const title = project?.name ?? translate('search_results');\n\n  return (\n    <BoxedGroupAccordion\n      className={classNames('big-spacer-bottom', {\n        open,\n        'not-clickable': !props.onClick,\n        'no-hover': !props.onClick\n      })}\n      onClick={\n        props.onClick\n          ? props.onClick\n          : () => {\n              /* noop */\n            }\n      }\n      open={open}\n      title={<h3>{title}</h3>}>\n      {open && (\n        <>\n          <div className=\"display-flex-wrap\">\n            {repositoryCount === 0 && (\n              <Alert variant=\"warning\">\n                <FormattedMessage\n                  defaultMessage={translate('onboarding.create_project.no_bbs_repos')}\n                  id=\"onboarding.create_project.no_bbs_repos\"\n                  values={{\n                    link: (\n                      <Link\n                        to={{\n                          pathname: '/projects/create',\n                          query: { mode: CreateProjectModes.BitbucketServer, resetPat: 1 }\n                        }}>\n                        {translate('onboarding.create_project.update_your_token')}\n                      </Link>\n                    )\n                  }}\n                />\n              </Alert>\n            )}\n\n            {repositories.map(repo =>\n              repo.sqProjectKey ? (\n                <div\n                  className=\"display-flex-start spacer-right spacer-bottom create-project-import-bbs-repo\"\n                  key={repo.id}>\n                  <CheckIcon className=\"spacer-right\" fill={colors.green} size={14} />\n                  <div className=\"overflow-hidden\">\n                    <div className=\"little-spacer-bottom text-ellipsis\">\n                      <strong title={repo.name}>\n                        <Link to={getProjectUrl(repo.sqProjectKey)}>{repo.name}</Link>\n                      </strong>\n                    </div>\n                    <em>{translate('onboarding.create_project.repository_imported')}</em>\n                  </div>\n                </div>\n              ) : (\n                <Radio\n                  checked={selectedRepository?.id === repo.id}\n                  className={classNames(\n                    'display-flex-start spacer-right spacer-bottom create-project-import-bbs-repo overflow-hidden',\n                    {\n                      disabled: disableRepositories,\n                      'text-muted': disableRepositories,\n                      'link-no-underline': disableRepositories\n                    }\n                  )}\n                  key={repo.id}\n                  onCheck={() => props.onSelectRepository(repo)}\n                  value={String(repo.id)}>\n                  <strong className=\"text-ellipsis\" title={repo.name}>\n                    {repo.name}\n                  </strong>\n                </Radio>\n              )\n            )}\n          </div>\n\n          {!showingAllRepositories && repositoryCount > 0 && (\n            <Alert variant=\"warning\">\n              {translateWithParameters(\n                'onboarding.create_project.only_showing_X_first_repos',\n                repositoryCount\n              )}\n            </Alert>\n          )}\n        </>\n      )}\n    </BoxedGroupAccordion>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { uniq, without } from 'lodash';\nimport * as React from 'react';\nimport { ButtonLink } from 'sonar-ui-common/components/controls/buttons';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport {\n  BitbucketProject,\n  BitbucketProjectRepositories,\n  BitbucketRepository\n} from '../../../types/alm-integration';\nimport BitbucketProjectAccordion from './BitbucketProjectAccordion';\n\nexport interface BitbucketRepositoriesProps {\n  disableRepositories: boolean;\n  onSelectRepository: (repo: BitbucketRepository) => void;\n  projects: BitbucketProject[];\n  projectRepositories: BitbucketProjectRepositories;\n  selectedRepository?: BitbucketRepository;\n}\n\nexport default function BitbucketRepositories(props: BitbucketRepositoriesProps) {\n  const { disableRepositories, projects, projectRepositories, selectedRepository } = props;\n\n  const [openProjectKeys, setOpenProjectKeys] = React.useState(\n    projects.length > 0 ? [projects[0].key] : []\n  );\n\n  const allAreExpanded = projects.length <= openProjectKeys.length;\n\n  const handleClick = (isOpen: boolean, projectKey: string) => {\n    setOpenProjectKeys(\n      isOpen ? without(openProjectKeys, projectKey) : uniq([...openProjectKeys, projectKey])\n    );\n  };\n\n  return (\n    <>\n      <div className=\"overflow-hidden spacer-bottom\">\n        <ButtonLink\n          className=\"pull-right\"\n          onClick={() => setOpenProjectKeys(allAreExpanded ? [] : projects.map(p => p.key))}>\n          {allAreExpanded ? translate('collapse_all') : translate('expand_all')}\n        </ButtonLink>\n      </div>\n\n      {projects.map(project => {\n        const isOpen = openProjectKeys.includes(project.key);\n        const { allShown, repositories = [] } = projectRepositories[project.key] || {};\n\n        return (\n          <BitbucketProjectAccordion\n            disableRepositories={disableRepositories}\n            key={project.key}\n            onClick={() => handleClick(isOpen, project.key)}\n            onSelectRepository={props.onSelectRepository}\n            open={isOpen}\n            project={project}\n            repositories={repositories}\n            selectedRepository={selectedRepository}\n            showingAllRepositories={allShown}\n          />\n        );\n      })}\n    </>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { Alert } from 'sonar-ui-common/components/ui/Alert';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { BitbucketProject, BitbucketRepository } from '../../../types/alm-integration';\nimport BitbucketProjectAccordion from './BitbucketProjectAccordion';\n\nexport interface BitbucketSearchResultsProps {\n  disableRepositories: boolean;\n  onSelectRepository: (repo: BitbucketRepository) => void;\n  projects: BitbucketProject[];\n  searching: boolean;\n  searchResults?: BitbucketRepository[];\n  selectedRepository?: BitbucketRepository;\n}\n\nexport default function BitbucketSearchResults(props: BitbucketSearchResultsProps) {\n  const {\n    disableRepositories,\n    projects,\n    searching,\n    searchResults = [],\n    selectedRepository\n  } = props;\n\n  if (searchResults.length === 0 && !searching) {\n    return (\n      <Alert className=\"big-spacer-top\" variant=\"warning\">\n        {translate('onboarding.create_project.no_bbs_repos.filter')}\n      </Alert>\n    );\n  }\n\n  const filteredProjects = projects.filter(p => searchResults.some(r => r.projectKey === p.key));\n  const filteredProjectKeys = filteredProjects.map(p => p.key);\n  const filteredSearchResults = searchResults.filter(\n    r => !filteredProjectKeys.includes(r.projectKey)\n  );\n\n  return (\n    <div className=\"big-spacer-top\">\n      <DeferredSpinner loading={searching}>\n        {filteredSearchResults.length > 0 && (\n          <BitbucketProjectAccordion\n            disableRepositories={disableRepositories}\n            onSelectRepository={props.onSelectRepository}\n            open={true}\n            repositories={filteredSearchResults}\n            selectedRepository={selectedRepository}\n            showingAllRepositories={true}\n          />\n        )}\n\n        {filteredProjects.map(project => {\n          const repositories = searchResults.filter(r => r.projectKey === project.key);\n\n          return (\n            <BitbucketProjectAccordion\n              disableRepositories={disableRepositories}\n              key={project.key}\n              onSelectRepository={props.onSelectRepository}\n              open={true}\n              project={project}\n              repositories={repositories}\n              selectedRepository={selectedRepository}\n              showingAllRepositories={true}\n            />\n          );\n        })}\n      </DeferredSpinner>\n    </div>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from 'react-router';\nimport SearchBox from 'sonar-ui-common/components/controls/SearchBox';\nimport { Alert } from 'sonar-ui-common/components/ui/Alert';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport {\n  BitbucketProject,\n  BitbucketProjectRepositories,\n  BitbucketRepository\n} from '../../../types/alm-integration';\nimport BitbucketRepositories from './BitbucketRepositories';\nimport BitbucketSearchResults from './BitbucketSearchResults';\nimport { CreateProjectModes } from './types';\n\nexport interface BitbucketImportRepositoryFormProps {\n  disableRepositories: boolean;\n  onSearch: (query: string) => void;\n  onSelectRepository: (repo: BitbucketRepository) => void;\n  projects?: BitbucketProject[];\n  projectRepositories?: BitbucketProjectRepositories;\n  searching: boolean;\n  searchResults?: BitbucketRepository[];\n  selectedRepository?: BitbucketRepository;\n}\n\nexport default function BitbucketImportRepositoryForm(props: BitbucketImportRepositoryFormProps) {\n  const {\n    disableRepositories,\n    projects = [],\n    projectRepositories = {},\n    searchResults,\n    searching,\n    selectedRepository\n  } = props;\n\n  if (projects.length === 0) {\n    return (\n      <Alert className=\"spacer-top\" variant=\"warning\">\n        <FormattedMessage\n          defaultMessage={translate('onboarding.create_project.no_bbs_projects')}\n          id=\"onboarding.create_project.no_bbs_projects\"\n          values={{\n            link: (\n              <Link\n                to={{\n                  pathname: '/projects/create',\n                  query: { mode: CreateProjectModes.BitbucketServer, resetPat: 1 }\n                }}>\n                {translate('onboarding.create_project.update_your_token')}\n              </Link>\n            )\n          }}\n        />\n      </Alert>\n    );\n  }\n\n  return (\n    <div className=\"create-project-import-bbs\">\n      <SearchBox\n        onChange={props.onSearch}\n        placeholder={translate('onboarding.create_project.search_repositories_by_name')}\n      />\n\n      {searching || searchResults ? (\n        <BitbucketSearchResults\n          disableRepositories={disableRepositories}\n          onSelectRepository={props.onSelectRepository}\n          projects={projects}\n          searchResults={searchResults}\n          searching={searching}\n          selectedRepository={selectedRepository}\n        />\n      ) : (\n        <BitbucketRepositories\n          disableRepositories={disableRepositories}\n          onSelectRepository={props.onSelectRepository}\n          projectRepositories={projectRepositories}\n          projects={projects}\n          selectedRepository={selectedRepository}\n        />\n      )}\n    </div>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { Button } from 'sonar-ui-common/components/controls/buttons';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { getBaseUrl } from 'sonar-ui-common/helpers/urls';\nimport {\n  BitbucketProject,\n  BitbucketProjectRepositories,\n  BitbucketRepository\n} from '../../../types/alm-integration';\nimport { AlmKeys, AlmSettingsInstance } from '../../../types/alm-settings';\nimport BitbucketImportRepositoryForm from './BitbucketImportRepositoryForm';\nimport CreateProjectPageHeader from './CreateProjectPageHeader';\nimport PersonalAccessTokenForm from './PersonalAccessTokenForm';\nimport WrongBindingCountAlert from './WrongBindingCountAlert';\n\nexport interface BitbucketProjectCreateRendererProps {\n  bitbucketSetting?: AlmSettingsInstance;\n  canAdmin?: boolean;\n  importing: boolean;\n  loading: boolean;\n  onImportRepository: () => void;\n  onSearch: (query: string) => void;\n  onSelectRepository: (repo: BitbucketRepository) => void;\n  onPersonalAccessTokenCreated: () => void;\n  projects?: BitbucketProject[];\n  projectRepositories?: BitbucketProjectRepositories;\n  resetPat: boolean;\n  searching: boolean;\n  searchResults?: BitbucketRepository[];\n  selectedRepository?: BitbucketRepository;\n  showPersonalAccessTokenForm?: boolean;\n}\n\nexport default function BitbucketProjectCreateRenderer(props: BitbucketProjectCreateRendererProps) {\n  const {\n    bitbucketSetting,\n    canAdmin,\n    importing,\n    loading,\n    projects,\n    projectRepositories,\n    selectedRepository,\n    searching,\n    searchResults,\n    showPersonalAccessTokenForm,\n    resetPat\n  } = props;\n\n  return (\n    <>\n      <CreateProjectPageHeader\n        additionalActions={\n          !showPersonalAccessTokenForm && (\n            <div className=\"display-flex-center pull-right\">\n              <DeferredSpinner className=\"spacer-right\" loading={importing} />\n              <Button\n                className=\"button-large button-primary\"\n                disabled={!selectedRepository || importing}\n                onClick={props.onImportRepository}>\n                {translate('onboarding.create_project.import_selected_repo')}\n              </Button>\n            </div>\n          )\n        }\n        title={\n          <span className=\"text-middle\">\n            <img\n              alt=\"\" // Should be ignored by screen readers\n              className=\"spacer-right\"\n              height=\"24\"\n              src={`${getBaseUrl()}/images/alm/bitbucket.svg`}\n            />\n            {translate('onboarding.create_project.from_bbs')}\n          </span>\n        }\n      />\n\n      {loading && <i className=\"spinner\" />}\n\n      {!loading && !bitbucketSetting && (\n        <WrongBindingCountAlert alm={AlmKeys.BitbucketServer} canAdmin={!!canAdmin} />\n      )}\n\n      {!loading &&\n        bitbucketSetting &&\n        (showPersonalAccessTokenForm ? (\n          <PersonalAccessTokenForm\n            almSetting={bitbucketSetting}\n            onPersonalAccessTokenCreated={props.onPersonalAccessTokenCreated}\n            resetPat={resetPat}\n          />\n        ) : (\n          <BitbucketImportRepositoryForm\n            disableRepositories={importing}\n            onSearch={props.onSearch}\n            onSelectRepository={props.onSelectRepository}\n            projectRepositories={projectRepositories}\n            projects={projects}\n            searchResults={searchResults}\n            searching={searching}\n            selectedRepository={selectedRepository}\n          />\n        ))}\n    </>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { WithRouterProps } from 'react-router';\nimport {\n  getBitbucketServerProjects,\n  getBitbucketServerRepositories,\n  importBitbucketServerProject,\n  searchForBitbucketServerRepositories\n} from '../../../api/alm-integrations';\nimport {\n  BitbucketProject,\n  BitbucketProjectRepositories,\n  BitbucketRepository\n} from '../../../types/alm-integration';\nimport { AlmSettingsInstance } from '../../../types/alm-settings';\nimport BitbucketCreateProjectRenderer from './BitbucketProjectCreateRenderer';\nimport { DEFAULT_BBS_PAGE_SIZE } from './constants';\n\ninterface Props extends Pick<WithRouterProps, 'location' | 'router'> {\n  canAdmin: boolean;\n  bitbucketSettings: AlmSettingsInstance[];\n  loadingBindings: boolean;\n  onProjectCreate: (projectKey: string) => void;\n}\n\ninterface State {\n  bitbucketSetting?: AlmSettingsInstance;\n  importing: boolean;\n  loading: boolean;\n  projects?: BitbucketProject[];\n  projectRepositories?: BitbucketProjectRepositories;\n  searching: boolean;\n  searchResults?: BitbucketRepository[];\n  selectedRepository?: BitbucketRepository;\n  showPersonalAccessTokenForm: boolean;\n}\n\nexport default class BitbucketProjectCreate extends React.PureComponent<Props, State> {\n  mounted = false;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      // For now, we only handle a single instance. So we always use the first\n      // one from the list.\n      bitbucketSetting: props.bitbucketSettings[0],\n      importing: false,\n      loading: false,\n      searching: false,\n      showPersonalAccessTokenForm: true\n    };\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.bitbucketSettings.length === 0 && this.props.bitbucketSettings.length > 0) {\n      this.setState({ bitbucketSetting: this.props.bitbucketSettings[0] }, () =>\n        this.fetchInitialData()\n      );\n    }\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  fetchInitialData = async () => {\n    const { showPersonalAccessTokenForm } = this.state;\n\n    if (!showPersonalAccessTokenForm) {\n      this.setState({ loading: true });\n      const projects = await this.fetchBitbucketProjects().catch(() => undefined);\n\n      let projectRepositories;\n      if (projects && projects.length > 0) {\n        projectRepositories = await this.fetchBitbucketRepositories(projects).catch(\n          () => undefined\n        );\n      }\n\n      if (this.mounted) {\n        this.setState({\n          projects,\n          projectRepositories,\n          loading: false\n        });\n      }\n    }\n  };\n\n  fetchBitbucketProjects = (): Promise<BitbucketProject[] | undefined> => {\n    const { bitbucketSetting } = this.state;\n\n    if (!bitbucketSetting) {\n      return Promise.resolve(undefined);\n    }\n\n    return getBitbucketServerProjects(bitbucketSetting.key).then(({ projects }) => projects);\n  };\n\n  fetchBitbucketRepositories = (\n    projects: BitbucketProject[]\n  ): Promise<BitbucketProjectRepositories | undefined> => {\n    const { bitbucketSetting } = this.state;\n\n    if (!bitbucketSetting) {\n      return Promise.resolve(undefined);\n    }\n\n    return Promise.all(\n      projects.map(p => {\n        return getBitbucketServerRepositories(bitbucketSetting.key, p.name).then(\n          ({ isLastPage, repositories }) => {\n            // Because the WS uses the project name rather than its key to find\n            // repositories, we can match more repositories than we expect. For\n            // example, p.name = \"A1\" would find repositories for projects \"A1\",\n            // \"A10\", \"A11\", etc. This is a limitation of BBS. To make sure we\n            // don't display incorrect information, filter on the project key.\n            const filteredRepositories = repositories.filter(r => r.projectKey === p.key);\n\n            // And because of the above, the \"isLastPage\" cannot be relied upon\n            // either. This one is impossible to get 100% for now. We can only\n            // make some assumptions: by default, the page size for BBS is 25\n            // (this is not part of the payload, so we don't know the actual\n            // number; but changing this implies changing some advanced config,\n            // so it's not likely). If the filtered repos is larger than this\n            // number AND isLastPage is false, we'll keep it at false.\n            // Otherwise, we assume it's true.\n            const realIsLastPage =\n              isLastPage || filteredRepositories.length < DEFAULT_BBS_PAGE_SIZE;\n\n            return {\n              repositories: filteredRepositories,\n              isLastPage: realIsLastPage,\n              projectKey: p.key\n            };\n          }\n        );\n      })\n    ).then(results => {\n      return results.reduce(\n        (acc: BitbucketProjectRepositories, { isLastPage, projectKey, repositories }) => {\n          return { ...acc, [projectKey]: { allShown: isLastPage, repositories } };\n        },\n        {}\n      );\n    });\n  };\n\n  cleanUrl = () => {\n    const { location, router } = this.props;\n    delete location.query.resetPat;\n    router.replace(location);\n  };\n\n  handlePersonalAccessTokenCreated = async () => {\n    this.setState({ showPersonalAccessTokenForm: false });\n    this.cleanUrl();\n    await this.fetchInitialData();\n  };\n\n  handleImportRepository = () => {\n    const { bitbucketSetting, selectedRepository } = this.state;\n\n    if (!bitbucketSetting || !selectedRepository) {\n      return;\n    }\n\n    this.setState({ importing: true });\n    importBitbucketServerProject(\n      bitbucketSetting.key,\n      selectedRepository.projectKey,\n      selectedRepository.slug\n    )\n      .then(({ project: { key } }) => {\n        if (this.mounted) {\n          this.setState({ importing: false });\n          this.props.onProjectCreate(key);\n        }\n      })\n      .catch(() => {\n        if (this.mounted) {\n          this.setState({ importing: false });\n        }\n      });\n  };\n\n  handleSearch = (query: string) => {\n    const { bitbucketSetting } = this.state;\n\n    if (!bitbucketSetting) {\n      return;\n    }\n\n    if (!query) {\n      this.setState({ searching: false, searchResults: undefined, selectedRepository: undefined });\n      return;\n    }\n\n    this.setState({ searching: true, selectedRepository: undefined });\n    searchForBitbucketServerRepositories(bitbucketSetting.key, query)\n      .then(({ repositories }) => {\n        if (this.mounted) {\n          this.setState({ searching: false, searchResults: repositories });\n        }\n      })\n      .catch(() => {\n        if (this.mounted) {\n          this.setState({ searching: false });\n        }\n      });\n  };\n\n  handleSelectRepository = (selectedRepository: BitbucketRepository) => {\n    this.setState({ selectedRepository });\n  };\n\n  render() {\n    const { canAdmin, loadingBindings, location } = this.props;\n    const {\n      bitbucketSetting,\n      importing,\n      loading,\n      projectRepositories,\n      projects,\n      searching,\n      searchResults,\n      selectedRepository,\n      showPersonalAccessTokenForm\n    } = this.state;\n\n    return (\n      <BitbucketCreateProjectRenderer\n        bitbucketSetting={bitbucketSetting}\n        canAdmin={canAdmin}\n        importing={importing}\n        loading={loading || loadingBindings}\n        onImportRepository={this.handleImportRepository}\n        onPersonalAccessTokenCreated={this.handlePersonalAccessTokenCreated}\n        onSearch={this.handleSearch}\n        onSelectRepository={this.handleSelectRepository}\n        projectRepositories={projectRepositories}\n        projects={projects}\n        resetPat={Boolean(location.query.resetPat)}\n        searchResults={searchResults}\n        searching={searching}\n        selectedRepository={selectedRepository}\n        showPersonalAccessTokenForm={\n          showPersonalAccessTokenForm || Boolean(location.query.resetPat)\n        }\n      />\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nexport const PROJECT_NAME_MAX_LEN = 255;\n\nexport const DEFAULT_BBS_PAGE_SIZE = 25;\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as classNames from 'classnames';\nimport * as React from 'react';\nimport ChevronsIcon from 'sonar-ui-common/components/icons/ChevronsIcon';\nimport { Alert } from 'sonar-ui-common/components/ui/Alert';\nimport { translate, translateWithParameters } from 'sonar-ui-common/helpers/l10n';\nimport { getBaseUrl } from 'sonar-ui-common/helpers/urls';\nimport { withAppState } from '../../../components/hoc/withAppState';\nimport { AlmKeys } from '../../../types/alm-settings';\nimport { CreateProjectModes } from './types';\n\nexport interface CreateProjectModeSelectionProps {\n  almCounts: {\n    [k in AlmKeys]: number;\n  };\n  appState: Pick<T.AppState, 'canAdmin'>;\n  loadingBindings: boolean;\n  onSelectMode: (mode: CreateProjectModes) => void;\n  onConfigMode: (mode: AlmKeys) => void;\n}\n\nconst DEFAULT_ICON_SIZE = 80;\n\nfunction renderAlmOption(\n  props: CreateProjectModeSelectionProps,\n  alm: AlmKeys.Azure | AlmKeys.BitbucketServer | AlmKeys.GitHub | AlmKeys.GitLab,\n  mode: CreateProjectModes,\n  last = false\n) {\n  const {\n    almCounts,\n    appState: { canAdmin },\n    loadingBindings\n  } = props;\n\n  const hasBitbucketCloudConf = almCounts[AlmKeys.BitbucketCloud] > 0;\n  const isBitbucketOption = alm === AlmKeys.BitbucketServer;\n\n  const count = isBitbucketOption\n    ? almCounts[AlmKeys.BitbucketServer] + almCounts[AlmKeys.BitbucketCloud]\n    : almCounts[alm];\n  const hasConfig = count > 0;\n  const hasTooManyConfig = count > 1;\n  const disabled = loadingBindings || hasTooManyConfig || (!hasConfig && !canAdmin);\n\n  const onClick = () => {\n    if (hasTooManyConfig || (!hasConfig && !canAdmin)) {\n      return null;\n    }\n\n    if (!hasConfig && canAdmin) {\n      return props.onConfigMode(alm);\n    }\n\n    return props.onSelectMode(\n      isBitbucketOption && hasBitbucketCloudConf ? CreateProjectModes.BitbucketCloud : mode\n    );\n  };\n\n  let errorMessage = '';\n\n  if (hasTooManyConfig) {\n    errorMessage = translateWithParameters(\n      'onboarding.create_project.too_many_alm_instances_X',\n      translate('alm', alm)\n    );\n  } else if (!hasConfig) {\n    errorMessage = canAdmin\n      ? translate('onboarding.create_project.alm_not_configured.admin')\n      : translate('onboarding.create_project.alm_not_configured');\n  }\n\n  return (\n    <div className=\"display-flex-column\">\n      <button\n        className={classNames(\n          'button button-huge display-flex-column create-project-mode-type-alm',\n          { disabled, 'big-spacer-right': !last }\n        )}\n        disabled={disabled}\n        onClick={onClick}\n        type=\"button\">\n        <img\n          alt=\"\" // Should be ignored by screen readers\n          height={DEFAULT_ICON_SIZE}\n          src={`${getBaseUrl()}/images/alm/${alm}.svg`}\n        />\n        <div className=\"medium big-spacer-top abs-height-50 display-flex-center\">\n          {translate('onboarding.create_project.select_method', alm)}\n        </div>\n\n        {loadingBindings && (\n          <span>\n            {translate('onboarding.create_project.check_alm_supported')}\n            <i className=\"little-spacer-left spinner\" />\n          </span>\n        )}\n\n        {!loadingBindings && errorMessage && (\n          <p className=\"text-muted small spacer-top\" style={{ lineHeight: 1.5 }}>\n            {errorMessage}\n          </p>\n        )}\n      </button>\n    </div>\n  );\n}\n\nexport function CreateProjectModeSelection(props: CreateProjectModeSelectionProps) {\n  const {\n    appState: { canAdmin },\n    almCounts\n  } = props;\n  const almTotalCount = Object.values(almCounts).reduce((prev, cur) => prev + cur);\n\n  return (\n    <>\n      <header className=\"padded huge-spacer-top display-flex-column display-flex-center\">\n        <div className=\"abs-width-800 huge-spacer-bottom\">\n          <h1 className=\"text-center big-spacer-bottom\">\n            {translate('onboarding.create_project.select_method')}\n          </h1>\n          <p className=\"text-center spacer-bottom\">\n            {translate('onboarding.create_project.select_method.description1')}\n          </p>\n          <p className=\"text-center\">\n            {translate('onboarding.create_project.select_method.description2')}\n          </p>\n        </div>\n      </header>\n\n      <div className=\"create-project-modes huge-spacer-top display-flex-end display-flex-justify-center\">\n        <div className=\"display-flex-column\">\n          {almTotalCount === 0 && canAdmin && (\n            <Alert variant=\"info\" className=\"big-spacer-bottom\">\n              {translate('onboarding.create_project.select_method.no_alm_yet.admin')}\n            </Alert>\n          )}\n          <div className=\"display-flex-center display-flex-space-between\">\n            {renderAlmOption(props, AlmKeys.Azure, CreateProjectModes.AzureDevOps)}\n            {renderAlmOption(props, AlmKeys.BitbucketServer, CreateProjectModes.BitbucketServer)}\n            {renderAlmOption(props, AlmKeys.GitHub, CreateProjectModes.GitHub)}\n            {renderAlmOption(props, AlmKeys.GitLab, CreateProjectModes.GitLab, true)}\n          </div>\n        </div>\n        <button\n          className=\"button button-huge big-spacer-left display-flex-column create-project-mode-type-manual\"\n          onClick={() => props.onSelectMode(CreateProjectModes.Manual)}\n          type=\"button\">\n          <ChevronsIcon size={DEFAULT_ICON_SIZE} />\n          <div className=\"medium big-spacer-top\">\n            {translate('onboarding.create_project.select_method.manual')}\n          </div>\n        </button>\n      </div>\n    </>\n  );\n}\n\nexport default withAppState(CreateProjectModeSelection);\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from 'react-router';\nimport { Button } from 'sonar-ui-common/components/controls/buttons';\nimport ListFooter from 'sonar-ui-common/components/controls/ListFooter';\nimport Radio from 'sonar-ui-common/components/controls/Radio';\nimport SearchBox from 'sonar-ui-common/components/controls/SearchBox';\nimport SearchSelect from 'sonar-ui-common/components/controls/SearchSelect';\nimport CheckIcon from 'sonar-ui-common/components/icons/CheckIcon';\nimport QualifierIcon from 'sonar-ui-common/components/icons/QualifierIcon';\nimport { Alert } from 'sonar-ui-common/components/ui/Alert';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { getBaseUrl } from '../../../helpers/system';\nimport { getProjectUrl } from '../../../helpers/urls';\nimport { GithubOrganization, GithubRepository } from '../../../types/alm-integration';\nimport { ComponentQualifier } from '../../../types/component';\nimport CreateProjectPageHeader from './CreateProjectPageHeader';\n\nexport interface GitHubProjectCreateRendererProps {\n  canAdmin: boolean;\n  error: boolean;\n  importing: boolean;\n  loadingBindings: boolean;\n  loadingOrganizations: boolean;\n  loadingRepositories: boolean;\n  onImportRepository: () => void;\n  onLoadMore: () => void;\n  onSearch: (q: string) => void;\n  onSelectOrganization: (key: string) => void;\n  onSelectRepository: (key: string) => void;\n  organizations: GithubOrganization[];\n  repositories?: GithubRepository[];\n  repositoryPaging: T.Paging;\n  searchQuery: string;\n  selectedOrganization?: GithubOrganization;\n  selectedRepository?: GithubRepository;\n}\n\nfunction orgToOption({ key, name }: GithubOrganization) {\n  return { value: key, label: name };\n}\n\nconst handleSearch = (organizations: GithubOrganization[]) => (q: string) =>\n  Promise.resolve(organizations.filter(o => !q || o.name.includes(q)).map(orgToOption));\n\nfunction renderRepositoryList(props: GitHubProjectCreateRendererProps) {\n  const {\n    importing,\n    loadingRepositories,\n    repositories,\n    repositoryPaging,\n    searchQuery,\n    selectedOrganization,\n    selectedRepository\n  } = props;\n\n  const isChecked = (repository: GithubRepository) =>\n    !!repository.sqProjectKey ||\n    (!!selectedRepository && selectedRepository.key === repository.key);\n\n  const isDisabled = (repository: GithubRepository) =>\n    !!repository.sqProjectKey || loadingRepositories || importing;\n\n  return (\n    selectedOrganization &&\n    repositories && (\n      <div className=\"boxed-group padded display-flex-wrap\">\n        <div className=\"width-100\">\n          <SearchBox\n            className=\"big-spacer-bottom\"\n            onChange={props.onSearch}\n            placeholder={translate('onboarding.create_project.search_repositories')}\n            value={searchQuery}\n          />\n        </div>\n\n        {repositories.length === 0 ? (\n          <div className=\"padded\">\n            <DeferredSpinner loading={loadingRepositories}>\n              {translate('no_results')}\n            </DeferredSpinner>\n          </div>\n        ) : (\n          repositories.map(r => (\n            <Radio\n              className=\"spacer-top spacer-bottom padded create-project-github-repository\"\n              key={r.key}\n              checked={isChecked(r)}\n              disabled={isDisabled(r)}\n              value={r.key}\n              onCheck={props.onSelectRepository}>\n              <div className=\"big overflow-hidden\" title={r.name}>\n                <div className=\"display-flex-start text-ellipsis\">\n                  {r.sqProjectKey ? (\n                    <Link className=\"display-flex-center\" to={getProjectUrl(r.sqProjectKey)}>\n                      <QualifierIcon\n                        className=\"spacer-right\"\n                        qualifier={ComponentQualifier.Project}\n                      />\n                      {r.name}\n                    </Link>\n                  ) : (\n                    r.name\n                  )}\n                </div>\n                {r.sqProjectKey && (\n                  <em className=\"notice text-muted-2 small display-flex-center\">\n                    {translate('onboarding.create_project.repository_imported')}\n                    <CheckIcon className=\"little-spacer-left\" size={12} />\n                  </em>\n                )}\n              </div>\n            </Radio>\n          ))\n        )}\n\n        <div className=\"display-flex-justify-center width-100\">\n          <ListFooter\n            count={repositories.length}\n            total={repositoryPaging.total}\n            loadMore={props.onLoadMore}\n            loading={loadingRepositories}\n          />\n        </div>\n      </div>\n    )\n  );\n}\n\nexport default function GitHubProjectCreateRenderer(props: GitHubProjectCreateRendererProps) {\n  const {\n    canAdmin,\n    error,\n    importing,\n    loadingBindings,\n    loadingOrganizations,\n    organizations,\n    selectedOrganization,\n    selectedRepository\n  } = props;\n\n  if (loadingBindings) {\n    return <DeferredSpinner />;\n  }\n\n  return (\n    <div>\n      <CreateProjectPageHeader\n        additionalActions={\n          selectedOrganization && (\n            <div className=\"display-flex-center pull-right\">\n              <DeferredSpinner className=\"spacer-right\" loading={importing} />\n              <Button\n                className=\"button-large button-primary\"\n                disabled={!selectedRepository || importing}\n                onClick={props.onImportRepository}>\n                {translate('onboarding.create_project.import_selected_repo')}\n              </Button>\n            </div>\n          )\n        }\n        title={\n          <span className=\"text-middle display-flex-center\">\n            <img\n              alt=\"\" // Should be ignored by screen readers\n              className=\"spacer-right\"\n              height={24}\n              src={`${getBaseUrl()}/images/alm/github.svg`}\n            />\n            {translate('onboarding.create_project.github.title')}\n          </span>\n        }\n      />\n\n      {error ? (\n        <div className=\"display-flex-justify-center\">\n          <div className=\"boxed-group padded width-50 huge-spacer-top\">\n            <h2 className=\"big-spacer-bottom\">\n              {translate('onboarding.create_project.github.warning.title')}\n            </h2>\n            <Alert variant=\"warning\">\n              {canAdmin ? (\n                <FormattedMessage\n                  id=\"onboarding.create_project.github.warning.message_admin\"\n                  defaultMessage={translate(\n                    'onboarding.create_project.github.warning.message_admin'\n                  )}\n                  values={{\n                    link: (\n                      <Link to=\"/admin/settings?category=almintegration\">\n                        {translate('onboarding.create_project.github.warning.message_admin.link')}\n                      </Link>\n                    )\n                  }}\n                />\n              ) : (\n                translate('onboarding.create_project.github.warning.message')\n              )}\n            </Alert>\n          </div>\n        </div>\n      ) : (\n        <DeferredSpinner loading={loadingOrganizations}>\n          <div className=\"form-field\">\n            <label>{translate('onboarding.create_project.github.choose_organization')}</label>\n            {organizations.length > 0 ? (\n              <SearchSelect\n                defaultOptions={organizations.map(orgToOption)}\n                onSearch={handleSearch(organizations)}\n                minimumQueryLength={0}\n                onSelect={({ value }) => props.onSelectOrganization(value)}\n                value={selectedOrganization && orgToOption(selectedOrganization)}\n              />\n            ) : (\n              !loadingOrganizations && (\n                <Alert className=\"spacer-top\" variant=\"error\">\n                  {canAdmin ? (\n                    <FormattedMessage\n                      id=\"onboarding.create_project.github.no_orgs_admin\"\n                      defaultMessage={translate('onboarding.create_project.github.no_orgs_admin')}\n                      values={{\n                        link: (\n                          <Link to=\"/admin/settings?category=almintegration\">\n                            {translate(\n                              'onboarding.create_project.github.warning.message_admin.link'\n                            )}\n                          </Link>\n                        )\n                      }}\n                    />\n                  ) : (\n                    translate('onboarding.create_project.github.no_orgs')\n                  )}\n                </Alert>\n              )\n            )}\n          </div>\n        </DeferredSpinner>\n      )}\n\n      {renderRepositoryList(props)}\n    </div>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { debounce } from 'lodash';\nimport * as React from 'react';\nimport { WithRouterProps } from 'react-router';\nimport { getHostUrl } from 'sonar-ui-common/helpers/urls';\nimport {\n  getGithubClientId,\n  getGithubOrganizations,\n  getGithubRepositories,\n  importGithubRepository\n} from '../../../api/alm-integrations';\nimport { GithubOrganization, GithubRepository } from '../../../types/alm-integration';\nimport { AlmKeys, AlmSettingsInstance } from '../../../types/alm-settings';\nimport GitHubProjectCreateRenderer from './GitHubProjectCreateRenderer';\n\ninterface Props extends Pick<WithRouterProps, 'location' | 'router'> {\n  canAdmin: boolean;\n  loadingBindings: boolean;\n  onProjectCreate: (projectKey: string) => void;\n  settings: AlmSettingsInstance[];\n}\n\ninterface State {\n  error: boolean;\n  importing: boolean;\n  loadingOrganizations: boolean;\n  loadingRepositories: boolean;\n  organizations: GithubOrganization[];\n  repositoryPaging: T.Paging;\n  repositories: GithubRepository[];\n  searchQuery: string;\n  selectedOrganization?: GithubOrganization;\n  selectedRepository?: GithubRepository;\n  settings?: AlmSettingsInstance;\n}\n\nconst REPOSITORY_PAGE_SIZE = 30;\n\nexport default class GitHubProjectCreate extends React.Component<Props, State> {\n  mounted = false;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      error: false,\n      importing: false,\n      loadingOrganizations: true,\n      loadingRepositories: false,\n      organizations: [],\n      repositories: [],\n      repositoryPaging: { pageSize: REPOSITORY_PAGE_SIZE, total: 0, pageIndex: 1 },\n      searchQuery: '',\n      settings: props.settings[0]\n    };\n\n    this.triggerSearch = debounce(this.triggerSearch, 250);\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n\n    this.initialize();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.settings.length === 0 && this.props.settings.length > 0) {\n      this.setState({ settings: this.props.settings[0] }, () => this.initialize());\n    }\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  async initialize() {\n    const { location, router } = this.props;\n    const { settings } = this.state;\n\n    if (!settings || !settings.url) {\n      this.setState({ error: true });\n      return;\n    } else {\n      this.setState({ error: false });\n    }\n\n    const code = location.query?.code;\n\n    try {\n      if (!code) {\n        await this.redirectToGithub(settings);\n      } else {\n        delete location.query.code;\n        router.replace(location);\n        await this.fetchOrganizations(settings, code);\n      }\n    } catch (e) {\n      if (this.mounted) {\n        this.setState({ error: true });\n      }\n    }\n  }\n\n  async redirectToGithub(settings: AlmSettingsInstance) {\n    if (!settings.url) {\n      return;\n    }\n\n    const { clientId } = await getGithubClientId(settings.key);\n\n    if (!clientId) {\n      this.setState({ error: true });\n      return;\n    }\n\n    const queryParams = [\n      { param: 'client_id', value: clientId },\n      { param: 'redirect_uri', value: `${getHostUrl()}/projects/create?mode=${AlmKeys.GitHub}` }\n    ]\n      .map(({ param, value }) => `${param}=${value}`)\n      .join('&');\n\n    let instanceRootUrl;\n    // Strip the api section from the url, since we're not hitting the api here.\n    if (settings.url.includes('/api/v3')) {\n      // GitHub Enterprise\n      instanceRootUrl = settings.url.replace('/api/v3', '');\n    } else {\n      // github.com\n      instanceRootUrl = settings.url.replace('api.', '');\n    }\n\n    // strip the trailing /\n    instanceRootUrl = instanceRootUrl.replace(/\\/$/, '');\n    window.location.replace(`${instanceRootUrl}/login/oauth/authorize?${queryParams}`);\n  }\n\n  async fetchOrganizations(settings: AlmSettingsInstance, token: string) {\n    const { organizations } = await getGithubOrganizations(settings.key, token);\n\n    if (this.mounted) {\n      this.setState({ loadingOrganizations: false, organizations });\n    }\n  }\n\n  async fetchRepositories(params: { organizationKey: string; page?: number; query?: string }) {\n    const { organizationKey, page = 1, query } = params;\n    const { settings } = this.state;\n\n    if (!settings) {\n      this.setState({ error: true });\n      return;\n    }\n\n    this.setState({ loadingRepositories: true });\n\n    try {\n      const data = await getGithubRepositories({\n        almSetting: settings.key,\n        organization: organizationKey,\n        pageSize: REPOSITORY_PAGE_SIZE,\n        page,\n        query\n      });\n\n      if (this.mounted) {\n        this.setState(({ repositories }) => ({\n          loadingRepositories: false,\n          repositoryPaging: data.paging,\n          repositories: page === 1 ? data.repositories : [...repositories, ...data.repositories]\n        }));\n      }\n    } catch (_) {\n      if (this.mounted) {\n        this.setState({\n          loadingRepositories: false,\n          repositoryPaging: { pageIndex: 1, pageSize: REPOSITORY_PAGE_SIZE, total: 0 },\n          repositories: []\n        });\n      }\n    }\n  }\n\n  triggerSearch = (query: string) => {\n    const { selectedOrganization } = this.state;\n    if (selectedOrganization) {\n      this.setState({ selectedRepository: undefined });\n      this.fetchRepositories({ organizationKey: selectedOrganization.key, query });\n    }\n  };\n\n  handleSelectOrganization = (key: string) => {\n    this.setState(({ organizations }) => ({\n      searchQuery: '',\n      selectedRepository: undefined,\n      selectedOrganization: organizations.find(o => o.key === key)\n    }));\n    this.fetchRepositories({ organizationKey: key });\n  };\n\n  handleSelectRepository = (key: string) => {\n    this.setState(({ repositories }) => ({\n      selectedRepository: repositories?.find(r => r.key === key)\n    }));\n  };\n\n  handleSearch = (searchQuery: string) => {\n    this.setState({ searchQuery });\n    this.triggerSearch(searchQuery);\n  };\n\n  handleLoadMore = () => {\n    const { repositoryPaging, searchQuery, selectedOrganization } = this.state;\n\n    if (selectedOrganization) {\n      this.fetchRepositories({\n        organizationKey: selectedOrganization.key,\n        page: repositoryPaging.pageIndex + 1,\n        query: searchQuery\n      });\n    }\n  };\n\n  handleImportRepository = async () => {\n    const { selectedOrganization, selectedRepository, settings } = this.state;\n\n    if (settings && selectedOrganization && selectedRepository) {\n      this.setState({ importing: true });\n\n      try {\n        const { project } = await importGithubRepository(\n          settings.key,\n          selectedOrganization.key,\n          selectedRepository.key\n        );\n\n        this.props.onProjectCreate(project.key);\n      } finally {\n        if (this.mounted) {\n          this.setState({ importing: false });\n        }\n      }\n    }\n  };\n\n  render() {\n    const { canAdmin, loadingBindings } = this.props;\n    const {\n      error,\n      importing,\n      loadingOrganizations,\n      loadingRepositories,\n      organizations,\n      repositoryPaging,\n      repositories,\n      searchQuery,\n      selectedOrganization,\n      selectedRepository\n    } = this.state;\n\n    return (\n      <GitHubProjectCreateRenderer\n        canAdmin={canAdmin}\n        error={error}\n        importing={importing}\n        loadingBindings={loadingBindings}\n        loadingOrganizations={loadingOrganizations}\n        loadingRepositories={loadingRepositories}\n        onImportRepository={this.handleImportRepository}\n        onLoadMore={this.handleLoadMore}\n        onSearch={this.handleSearch}\n        onSelectOrganization={this.handleSelectOrganization}\n        onSelectRepository={this.handleSelectRepository}\n        organizations={organizations}\n        repositoryPaging={repositoryPaging}\n        searchQuery={searchQuery}\n        repositories={repositories}\n        selectedOrganization={selectedOrganization}\n        selectedRepository={selectedRepository}\n      />\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from 'react-router';\nimport { Button } from 'sonar-ui-common/components/controls/buttons';\nimport ListFooter from 'sonar-ui-common/components/controls/ListFooter';\nimport SearchBox from 'sonar-ui-common/components/controls/SearchBox';\nimport Tooltip from 'sonar-ui-common/components/controls/Tooltip';\nimport CheckIcon from 'sonar-ui-common/components/icons/CheckIcon';\nimport DetachIcon from 'sonar-ui-common/components/icons/DetachIcon';\nimport QualifierIcon from 'sonar-ui-common/components/icons/QualifierIcon';\nimport { Alert } from 'sonar-ui-common/components/ui/Alert';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { getProjectUrl } from '../../../helpers/urls';\nimport { GitlabProject } from '../../../types/alm-integration';\nimport { ComponentQualifier } from '../../../types/component';\nimport { CreateProjectModes } from './types';\n\nexport interface GitlabProjectSelectionFormProps {\n  importingGitlabProjectId?: string;\n  loadingMore: boolean;\n  onImport: (gitlabProjectId: string) => void;\n  onLoadMore: () => void;\n  onSearch: (searchQuery: string) => void;\n  projects?: GitlabProject[];\n  projectsPaging: T.Paging;\n  searching: boolean;\n  searchQuery: string;\n}\n\nexport default function GitlabProjectSelectionForm(props: GitlabProjectSelectionFormProps) {\n  const {\n    importingGitlabProjectId,\n    loadingMore,\n    projects = [],\n    projectsPaging,\n    searching,\n    searchQuery\n  } = props;\n\n  if (projects.length === 0 && searchQuery.length === 0 && !searching) {\n    return (\n      <Alert className=\"spacer-top\" variant=\"warning\">\n        <FormattedMessage\n          defaultMessage={translate('onboarding.create_project.gitlab.no_projects')}\n          id=\"onboarding.create_project.gitlab.no_projects\"\n          values={{\n            link: (\n              <Link\n                to={{\n                  pathname: '/projects/create',\n                  query: { mode: CreateProjectModes.GitLab, resetPat: 1 }\n                }}>\n                {translate('onboarding.create_project.update_your_token')}\n              </Link>\n            )\n          }}\n        />\n      </Alert>\n    );\n  }\n\n  return (\n    <div className=\"boxed-group big-padded create-project-import\">\n      <SearchBox\n        className=\"spacer\"\n        loading={searching}\n        minLength={3}\n        onChange={props.onSearch}\n        placeholder={translate('onboarding.create_project.search_prompt')}\n      />\n\n      <hr />\n\n      {projects.length === 0 ? (\n        <div className=\"padded\">{translate('no_results')}</div>\n      ) : (\n        <table className=\"data zebra zebra-hover\">\n          <tbody>\n            {projects.map(project => (\n              <tr key={project.id}>\n                <td>\n                  <Tooltip overlay={project.slug}>\n                    <strong className=\"project-name display-inline-block text-ellipsis\">\n                      {project.sqProjectKey ? (\n                        <Link to={getProjectUrl(project.sqProjectKey)}>\n                          <QualifierIcon\n                            className=\"spacer-right\"\n                            qualifier={ComponentQualifier.Project}\n                          />\n                          {project.sqProjectName}\n                        </Link>\n                      ) : (\n                        project.name\n                      )}\n                    </strong>\n                  </Tooltip>\n                  <br />\n                  <Tooltip overlay={project.pathSlug}>\n                    <span className=\"text-muted project-path display-inline-block text-ellipsis\">\n                      {project.pathName}\n                    </span>\n                  </Tooltip>\n                </td>\n                <td>\n                  <a\n                    className=\"display-inline-flex-center big-spacer-right\"\n                    href={project.url}\n                    rel=\"noopener noreferrer\"\n                    target=\"_blank\">\n                    <DetachIcon className=\"little-spacer-right\" />\n                    {translate('onboarding.create_project.gitlab.link')}\n                  </a>\n                </td>\n                {project.sqProjectKey ? (\n                  <td>\n                    <span className=\"display-flex-center display-flex-justify-end already-set-up\">\n                      <CheckIcon className=\"little-spacer-right\" size={12} />\n                      {translate('onboarding.create_project.repository_imported')}\n                    </span>\n                  </td>\n                ) : (\n                  <td className=\"text-right\">\n                    <Button\n                      disabled={!!importingGitlabProjectId}\n                      onClick={() => props.onImport(project.id)}>\n                      {translate('onboarding.create_project.set_up')}\n                      {importingGitlabProjectId === project.id && (\n                        <DeferredSpinner className=\"spacer-left\" />\n                      )}\n                    </Button>\n                  </td>\n                )}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n      <ListFooter\n        count={projects.length}\n        loadMore={props.onLoadMore}\n        loading={loadingMore}\n        total={projectsPaging.total}\n      />\n    </div>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { getBaseUrl } from 'sonar-ui-common/helpers/urls';\nimport { GitlabProject } from '../../../types/alm-integration';\nimport { AlmKeys, AlmSettingsInstance } from '../../../types/alm-settings';\nimport CreateProjectPageHeader from './CreateProjectPageHeader';\nimport GitlabProjectSelectionForm from './GitlabProjectSelectionForm';\nimport PersonalAccessTokenForm from './PersonalAccessTokenForm';\nimport WrongBindingCountAlert from './WrongBindingCountAlert';\n\nexport interface GitlabProjectCreateRendererProps {\n  canAdmin?: boolean;\n  importingGitlabProjectId?: string;\n  loading: boolean;\n  loadingMore: boolean;\n  onImport: (gitlabProjectId: string) => void;\n  onLoadMore: () => void;\n  onPersonalAccessTokenCreated: () => void;\n  onSearch: (searchQuery: string) => void;\n  projects?: GitlabProject[];\n  projectsPaging: T.Paging;\n  resetPat: boolean;\n  searching: boolean;\n  searchQuery: string;\n  settings?: AlmSettingsInstance;\n  showPersonalAccessTokenForm?: boolean;\n}\n\nexport default function GitlabProjectCreateRenderer(props: GitlabProjectCreateRendererProps) {\n  const {\n    canAdmin,\n    importingGitlabProjectId,\n    loading,\n    loadingMore,\n    projects,\n    projectsPaging,\n    resetPat,\n    searching,\n    searchQuery,\n    settings,\n    showPersonalAccessTokenForm\n  } = props;\n\n  return (\n    <>\n      <CreateProjectPageHeader\n        title={\n          <span className=\"text-middle\">\n            <img\n              alt=\"\" // Should be ignored by screen readers\n              className=\"spacer-right\"\n              height=\"24\"\n              src={`${getBaseUrl()}/images/alm/gitlab.svg`}\n            />\n            {translate('onboarding.create_project.gitlab.title')}\n          </span>\n        }\n      />\n\n      {loading && <i className=\"spinner\" />}\n\n      {!loading && !settings && (\n        <WrongBindingCountAlert alm={AlmKeys.GitLab} canAdmin={!!canAdmin} />\n      )}\n\n      {!loading &&\n        settings &&\n        (showPersonalAccessTokenForm ? (\n          <PersonalAccessTokenForm\n            almSetting={settings}\n            resetPat={resetPat}\n            onPersonalAccessTokenCreated={props.onPersonalAccessTokenCreated}\n          />\n        ) : (\n          <GitlabProjectSelectionForm\n            importingGitlabProjectId={importingGitlabProjectId}\n            loadingMore={loadingMore}\n            onImport={props.onImport}\n            onLoadMore={props.onLoadMore}\n            onSearch={props.onSearch}\n            projects={projects}\n            projectsPaging={projectsPaging}\n            searching={searching}\n            searchQuery={searchQuery}\n          />\n        ))}\n    </>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { WithRouterProps } from 'react-router';\nimport { getGitlabProjects, importGitlabProject } from '../../../api/alm-integrations';\nimport { GitlabProject } from '../../../types/alm-integration';\nimport { AlmSettingsInstance } from '../../../types/alm-settings';\nimport GitlabProjectCreateRenderer from './GitlabProjectCreateRenderer';\n\ninterface Props extends Pick<WithRouterProps, 'location' | 'router'> {\n  canAdmin: boolean;\n  loadingBindings: boolean;\n  onProjectCreate: (projectKey: string) => void;\n  settings: AlmSettingsInstance[];\n}\n\ninterface State {\n  importingGitlabProjectId?: string;\n  loading: boolean;\n  loadingMore: boolean;\n  projects?: GitlabProject[];\n  projectsPaging: T.Paging;\n  resetPat: boolean;\n  searching: boolean;\n  searchQuery: string;\n  settings?: AlmSettingsInstance;\n  showPersonalAccessTokenForm: boolean;\n}\n\nconst GITLAB_PROJECTS_PAGESIZE = 30;\n\nexport default class GitlabProjectCreate extends React.PureComponent<Props, State> {\n  mounted = false;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      loading: false,\n      loadingMore: false,\n      projectsPaging: { pageIndex: 1, total: 0, pageSize: GITLAB_PROJECTS_PAGESIZE },\n      resetPat: false,\n      showPersonalAccessTokenForm: true,\n      searching: false,\n      searchQuery: '',\n      settings: props.settings.length === 1 ? props.settings[0] : undefined\n    };\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.settings.length === 0 && this.props.settings.length > 0) {\n      this.setState(\n        { settings: this.props.settings.length === 1 ? this.props.settings[0] : undefined },\n        () => this.fetchInitialData()\n      );\n    }\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  fetchInitialData = async () => {\n    const { showPersonalAccessTokenForm } = this.state;\n\n    if (!showPersonalAccessTokenForm) {\n      this.setState({ loading: true });\n      const result = await this.fetchProjects();\n      if (this.mounted && result) {\n        const { projects, projectsPaging } = result;\n\n        this.setState({\n          loading: false,\n          projects,\n          projectsPaging\n        });\n      } else {\n        this.setState({\n          loading: false\n        });\n      }\n    }\n  };\n\n  handleError = () => {\n    if (this.mounted) {\n      this.setState({ resetPat: true, showPersonalAccessTokenForm: true });\n    }\n\n    return undefined;\n  };\n\n  fetchProjects = async (pageIndex = 1, query?: string) => {\n    const { settings } = this.state;\n    if (!settings) {\n      return Promise.resolve(undefined);\n    }\n\n    try {\n      return await getGitlabProjects({\n        almSetting: settings.key,\n        page: pageIndex,\n        pageSize: GITLAB_PROJECTS_PAGESIZE,\n        query\n      });\n    } catch (_) {\n      return this.handleError();\n    }\n  };\n\n  doImport = async (gitlabProjectId: string) => {\n    const { settings } = this.state;\n\n    if (!settings) {\n      return Promise.resolve(undefined);\n    }\n\n    try {\n      return await importGitlabProject({\n        almSetting: settings.key,\n        gitlabProjectId\n      });\n    } catch (_) {\n      return this.handleError();\n    }\n  };\n\n  handleImport = async (gitlabProjectId: string) => {\n    this.setState({ importingGitlabProjectId: gitlabProjectId });\n\n    const result = await this.doImport(gitlabProjectId);\n\n    if (this.mounted) {\n      this.setState({ importingGitlabProjectId: undefined });\n\n      if (result) {\n        this.props.onProjectCreate(result.project.key);\n      }\n    }\n  };\n\n  handleLoadMore = async () => {\n    this.setState({ loadingMore: true });\n\n    const {\n      projectsPaging: { pageIndex },\n      searchQuery\n    } = this.state;\n\n    const result = await this.fetchProjects(pageIndex + 1, searchQuery);\n\n    if (this.mounted) {\n      this.setState(({ projects = [], projectsPaging }) => ({\n        loadingMore: false,\n        projects: result ? [...projects, ...result.projects] : projects,\n        projectsPaging: result ? result.projectsPaging : projectsPaging\n      }));\n    }\n  };\n\n  handleSearch = async (searchQuery: string) => {\n    this.setState({ searching: true, searchQuery });\n\n    const result = await this.fetchProjects(1, searchQuery);\n\n    if (this.mounted) {\n      this.setState(({ projects, projectsPaging }) => ({\n        searching: false,\n        projects: result ? result.projects : projects,\n        projectsPaging: result ? result.projectsPaging : projectsPaging\n      }));\n    }\n  };\n\n  cleanUrl = () => {\n    const { location, router } = this.props;\n    delete location.query.resetPat;\n    router.replace(location);\n  };\n\n  handlePersonalAccessTokenCreated = async () => {\n    this.setState({ showPersonalAccessTokenForm: false, resetPat: false });\n    this.cleanUrl();\n    await this.fetchInitialData();\n  };\n\n  render() {\n    const { canAdmin, loadingBindings, location } = this.props;\n    const {\n      importingGitlabProjectId,\n      loading,\n      loadingMore,\n      projects,\n      projectsPaging,\n      resetPat,\n      searching,\n      searchQuery,\n      settings,\n      showPersonalAccessTokenForm\n    } = this.state;\n\n    return (\n      <GitlabProjectCreateRenderer\n        settings={settings}\n        canAdmin={canAdmin}\n        importingGitlabProjectId={importingGitlabProjectId}\n        loading={loading || loadingBindings}\n        loadingMore={loadingMore}\n        onImport={this.handleImport}\n        onLoadMore={this.handleLoadMore}\n        onPersonalAccessTokenCreated={this.handlePersonalAccessTokenCreated}\n        onSearch={this.handleSearch}\n        projects={projects}\n        projectsPaging={projectsPaging}\n        resetPat={resetPat || Boolean(location.query.resetPat)}\n        searching={searching}\n        searchQuery={searchQuery}\n        showPersonalAccessTokenForm={\n          showPersonalAccessTokenForm || Boolean(location.query.resetPat)\n        }\n      />\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as classNames from 'classnames';\nimport { debounce } from 'lodash';\nimport * as React from 'react';\nimport { SubmitButton } from 'sonar-ui-common/components/controls/buttons';\nimport ValidationInput from 'sonar-ui-common/components/controls/ValidationInput';\nimport { Alert } from 'sonar-ui-common/components/ui/Alert';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport MandatoryFieldsExplanation from 'sonar-ui-common/components/ui/MandatoryFieldsExplanation';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { createProject, doesComponentExists } from '../../../api/components';\nimport ProjectKeyInput from '../../../components/common/ProjectKeyInput';\nimport { PROJECT_KEY_INVALID_CHARACTERS, validateProjectKey } from '../../../helpers/projects';\nimport { ProjectKeyValidationResult } from '../../../types/component';\nimport { PROJECT_NAME_MAX_LEN } from './constants';\nimport CreateProjectPageHeader from './CreateProjectPageHeader';\nimport './ManualProjectCreate.css';\n\ninterface Props {\n  branchesEnabled: boolean;\n  onProjectCreate: (projectKey: string) => void;\n}\n\ninterface State {\n  projectName: string;\n  projectNameError?: string;\n  projectNameTouched?: boolean;\n  projectKey: string;\n  projectKeyError?: string;\n  projectKeyTouched?: boolean;\n  validatingProjectKey: boolean;\n  submitting: boolean;\n}\n\ntype ValidState = State & Required<Pick<State, 'projectKey' | 'projectName'>>;\n\nexport default class ManualProjectCreate extends React.PureComponent<Props, State> {\n  mounted = false;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      projectKey: '',\n      projectName: '',\n      submitting: false,\n      validatingProjectKey: false\n    };\n    this.checkFreeKey = debounce(this.checkFreeKey, 250);\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  checkFreeKey = (key: string) => {\n    this.setState({ validatingProjectKey: true });\n\n    return doesComponentExists({ component: key })\n      .then(alreadyExist => {\n        if (this.mounted && key === this.state.projectKey) {\n          this.setState({\n            projectKeyError: alreadyExist\n              ? translate('onboarding.create_project.project_key.taken')\n              : undefined,\n            validatingProjectKey: false\n          });\n        }\n      })\n      .catch(() => {\n        if (this.mounted && key === this.state.projectKey) {\n          this.setState({ projectKeyError: undefined, validatingProjectKey: false });\n        }\n      });\n  };\n\n  canSubmit(state: State): state is ValidState {\n    const { projectKey, projectKeyError, projectName, projectNameError } = state;\n    return Boolean(\n      projectKeyError === undefined &&\n        projectNameError === undefined &&\n        projectKey.length > 0 &&\n        projectName.length > 0\n    );\n  }\n\n  handleFormSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const { state } = this;\n    if (this.canSubmit(state)) {\n      this.setState({ submitting: true });\n      createProject({\n        project: state.projectKey,\n        name: (state.projectName || state.projectKey).trim()\n      }).then(\n        ({ project }) => this.props.onProjectCreate(project.key),\n        () => {\n          if (this.mounted) {\n            this.setState({ submitting: false });\n          }\n        }\n      );\n    }\n  };\n\n  handleProjectKeyChange = (projectKey: string, fromUI = false) => {\n    const projectKeyError = this.validateKey(projectKey);\n\n    this.setState({\n      projectKey,\n      projectKeyError,\n      projectKeyTouched: fromUI\n    });\n\n    if (projectKeyError === undefined) {\n      this.checkFreeKey(projectKey);\n    }\n  };\n\n  handleProjectNameChange = (projectName: string, fromUI = false) => {\n    this.setState(\n      {\n        projectName,\n        projectNameError: this.validateName(projectName),\n        projectNameTouched: fromUI\n      },\n      () => {\n        if (!this.state.projectKeyTouched) {\n          const sanitizedProjectKey = this.state.projectName\n            .trim()\n            .replace(PROJECT_KEY_INVALID_CHARACTERS, '-');\n          this.handleProjectKeyChange(sanitizedProjectKey);\n        }\n      }\n    );\n  };\n\n  validateKey = (projectKey: string) => {\n    const result = validateProjectKey(projectKey);\n    return result === ProjectKeyValidationResult.Valid\n      ? undefined\n      : translate('onboarding.create_project.project_key.error', result);\n  };\n\n  validateName = (projectName: string) => {\n    if (projectName.length === 0) {\n      return translate('onboarding.create_project.display_name.error.empty');\n    } else if (projectName.length > PROJECT_NAME_MAX_LEN) {\n      return translate('onboarding.create_project.display_name.error.too_long');\n    }\n    return undefined;\n  };\n\n  render() {\n    const {\n      projectKey,\n      projectKeyError,\n      projectKeyTouched,\n      projectName,\n      projectNameError,\n      projectNameTouched,\n      validatingProjectKey,\n      submitting\n    } = this.state;\n    const { branchesEnabled } = this.props;\n\n    const touched = !!(projectKeyTouched || projectNameTouched);\n    const projectNameIsInvalid = touched && projectNameError !== undefined;\n    const projectNameIsValid = touched && projectNameError === undefined;\n\n    return (\n      <>\n        <CreateProjectPageHeader title={translate('onboarding.create_project.setup_manually')} />\n\n        <div className=\"create-project-manual\">\n          <div className=\"flex-1 huge-spacer-right\">\n            <form className=\"manual-project-create\" onSubmit={this.handleFormSubmit}>\n              <MandatoryFieldsExplanation className=\"big-spacer-bottom\" />\n\n              <ValidationInput\n                className=\"form-field\"\n                description={translate('onboarding.create_project.display_name.description')}\n                error={projectNameError}\n                id=\"project-name\"\n                isInvalid={projectNameIsInvalid}\n                isValid={projectNameIsValid}\n                label={translate('onboarding.create_project.display_name')}\n                required={true}>\n                <input\n                  className={classNames('input-super-large', {\n                    'is-invalid': projectNameIsInvalid,\n                    'is-valid': projectNameIsValid\n                  })}\n                  id=\"project-name\"\n                  maxLength={PROJECT_NAME_MAX_LEN}\n                  minLength={1}\n                  onChange={e => this.handleProjectNameChange(e.currentTarget.value, true)}\n                  type=\"text\"\n                  value={projectName}\n                  autoFocus={true}\n                />\n              </ValidationInput>\n              <ProjectKeyInput\n                error={projectKeyError}\n                label={translate('onboarding.create_project.project_key')}\n                onProjectKeyChange={e => this.handleProjectKeyChange(e.currentTarget.value, true)}\n                projectKey={projectKey}\n                touched={touched}\n                validating={validatingProjectKey}\n              />\n\n              <SubmitButton disabled={!this.canSubmit(this.state) || submitting}>\n                {translate('set_up')}\n              </SubmitButton>\n              <DeferredSpinner className=\"spacer-left\" loading={submitting} />\n            </form>\n\n            {branchesEnabled && (\n              <Alert variant=\"info\" display=\"inline\" className=\"big-spacer-top\">\n                {translate('onboarding.create_project.pr_decoration.information')}\n              </Alert>\n            )}\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport { WithRouterProps } from 'react-router';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { getAlmSettings } from '../../../api/alm-settings';\nimport A11ySkipTarget from '../../../app/components/a11y/A11ySkipTarget';\nimport { whenLoggedIn } from '../../../components/hoc/whenLoggedIn';\nimport { withAppState } from '../../../components/hoc/withAppState';\nimport { getProjectUrl } from '../../../helpers/urls';\nimport { AlmKeys, AlmSettingsInstance } from '../../../types/alm-settings';\nimport AlmBindingDefinitionForm from '../../settings/components/almIntegration/AlmBindingDefinitionForm';\nimport AzureProjectCreate from './AzureProjectCreate';\nimport BitbucketCloudProjectCreate from './BitbucketCloudProjectCreate';\nimport BitbucketProjectCreate from './BitbucketProjectCreate';\nimport CreateProjectModeSelection from './CreateProjectModeSelection';\nimport GitHubProjectCreate from './GitHubProjectCreate';\nimport GitlabProjectCreate from './GitlabProjectCreate';\nimport ManualProjectCreate from './ManualProjectCreate';\nimport './style.css';\nimport { CreateProjectModes } from './types';\n\ninterface Props extends Pick<WithRouterProps, 'router' | 'location'> {\n  appState: Pick<T.AppState, 'canAdmin' | 'branchesEnabled'>;\n  currentUser: T.LoggedInUser;\n}\n\ninterface State {\n  azureSettings: AlmSettingsInstance[];\n  bitbucketSettings: AlmSettingsInstance[];\n  bitbucketCloudSettings: AlmSettingsInstance[];\n  githubSettings: AlmSettingsInstance[];\n  gitlabSettings: AlmSettingsInstance[];\n  loading: boolean;\n  creatingAlmDefinition?: AlmKeys;\n}\n\nconst PROJECT_MODE_FOR_ALM_KEY = {\n  [AlmKeys.Azure]: CreateProjectModes.AzureDevOps,\n  [AlmKeys.BitbucketCloud]: CreateProjectModes.BitbucketCloud,\n  [AlmKeys.BitbucketServer]: CreateProjectModes.BitbucketServer,\n  [AlmKeys.GitHub]: CreateProjectModes.GitHub,\n  [AlmKeys.GitLab]: CreateProjectModes.GitLab\n};\n\nexport class CreateProjectPage extends React.PureComponent<Props, State> {\n  mounted = false;\n  state: State = {\n    azureSettings: [],\n    bitbucketSettings: [],\n    bitbucketCloudSettings: [],\n    githubSettings: [],\n    gitlabSettings: [],\n    loading: true\n  };\n\n  componentDidMount() {\n    this.mounted = true;\n    this.fetchAlmBindings();\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  fetchAlmBindings = () => {\n    this.setState({ loading: true });\n    return getAlmSettings()\n      .then(almSettings => {\n        if (this.mounted) {\n          this.setState({\n            azureSettings: almSettings.filter(s => s.alm === AlmKeys.Azure),\n            bitbucketSettings: almSettings.filter(s => s.alm === AlmKeys.BitbucketServer),\n            bitbucketCloudSettings: almSettings.filter(s => s.alm === AlmKeys.BitbucketCloud),\n            githubSettings: almSettings.filter(s => s.alm === AlmKeys.GitHub),\n            gitlabSettings: almSettings.filter(s => s.alm === AlmKeys.GitLab),\n            loading: false\n          });\n        }\n      })\n      .catch(() => {\n        if (this.mounted) {\n          this.setState({ loading: false });\n        }\n      });\n  };\n\n  handleModeSelect = (mode: CreateProjectModes) => {\n    const { router, location } = this.props;\n    router.push({\n      pathname: location.pathname,\n      query: { mode }\n    });\n  };\n\n  handleModeConfig = (alm: AlmKeys) => {\n    this.setState({ creatingAlmDefinition: alm });\n  };\n\n  handleProjectCreate = (projectKey: string) => {\n    this.props.router.push(getProjectUrl(projectKey));\n  };\n\n  handleOnCancelCreation = () => {\n    this.setState({ creatingAlmDefinition: undefined });\n  };\n\n  handleAfterSubmit = async () => {\n    let { creatingAlmDefinition: createdAlmDefinition } = this.state;\n\n    this.setState({ creatingAlmDefinition: undefined });\n\n    await this.fetchAlmBindings();\n\n    if (this.mounted && createdAlmDefinition) {\n      const { bitbucketCloudSettings } = this.state;\n\n      if (createdAlmDefinition === AlmKeys.BitbucketServer && bitbucketCloudSettings.length > 0) {\n        createdAlmDefinition = AlmKeys.BitbucketCloud;\n      }\n\n      this.handleModeSelect(PROJECT_MODE_FOR_ALM_KEY[createdAlmDefinition]);\n    }\n  };\n\n  renderProjectCreation(mode?: CreateProjectModes) {\n    const {\n      appState: { canAdmin, branchesEnabled },\n      location,\n      router\n    } = this.props;\n    const {\n      azureSettings,\n      bitbucketSettings,\n      bitbucketCloudSettings,\n      githubSettings,\n      gitlabSettings,\n      loading\n    } = this.state;\n\n    switch (mode) {\n      case CreateProjectModes.AzureDevOps: {\n        return (\n          <AzureProjectCreate\n            canAdmin={!!canAdmin}\n            loadingBindings={loading}\n            location={location}\n            onProjectCreate={this.handleProjectCreate}\n            router={router}\n            settings={azureSettings}\n          />\n        );\n      }\n      case CreateProjectModes.BitbucketServer: {\n        return (\n          <BitbucketProjectCreate\n            canAdmin={!!canAdmin}\n            bitbucketSettings={bitbucketSettings}\n            loadingBindings={loading}\n            location={location}\n            onProjectCreate={this.handleProjectCreate}\n            router={router}\n          />\n        );\n      }\n      case CreateProjectModes.BitbucketCloud: {\n        return (\n          <BitbucketCloudProjectCreate\n            canAdmin={!!canAdmin}\n            loadingBindings={loading}\n            location={location}\n            onProjectCreate={this.handleProjectCreate}\n            router={router}\n            settings={bitbucketCloudSettings}\n          />\n        );\n      }\n      case CreateProjectModes.GitHub: {\n        return (\n          <GitHubProjectCreate\n            canAdmin={!!canAdmin}\n            loadingBindings={loading}\n            location={location}\n            onProjectCreate={this.handleProjectCreate}\n            router={router}\n            settings={githubSettings}\n          />\n        );\n      }\n      case CreateProjectModes.GitLab: {\n        return (\n          <GitlabProjectCreate\n            canAdmin={!!canAdmin}\n            loadingBindings={loading}\n            location={location}\n            onProjectCreate={this.handleProjectCreate}\n            router={router}\n            settings={gitlabSettings}\n          />\n        );\n      }\n      case CreateProjectModes.Manual: {\n        return (\n          <ManualProjectCreate\n            branchesEnabled={!!branchesEnabled}\n            onProjectCreate={this.handleProjectCreate}\n          />\n        );\n      }\n      default: {\n        const almCounts = {\n          [AlmKeys.Azure]: azureSettings.length,\n          [AlmKeys.BitbucketServer]: bitbucketSettings.length,\n          [AlmKeys.BitbucketCloud]: bitbucketCloudSettings.length,\n          [AlmKeys.GitHub]: githubSettings.length,\n          [AlmKeys.GitLab]: gitlabSettings.length\n        };\n        return (\n          <CreateProjectModeSelection\n            almCounts={almCounts}\n            loadingBindings={loading}\n            onSelectMode={this.handleModeSelect}\n            onConfigMode={this.handleModeConfig}\n          />\n        );\n      }\n    }\n  }\n\n  render() {\n    const { location } = this.props;\n    const { creatingAlmDefinition } = this.state;\n    const mode: CreateProjectModes | undefined = location.query?.mode;\n\n    return (\n      <>\n        <Helmet title={translate('onboarding.create_project.select_method')} titleTemplate=\"%s\" />\n        <A11ySkipTarget anchor=\"create_project_main\" />\n        <div className=\"page page-limited huge-spacer-bottom position-relative\" id=\"create-project\">\n          {this.renderProjectCreation(mode)}\n          {creatingAlmDefinition && (\n            <AlmBindingDefinitionForm\n              alm={creatingAlmDefinition}\n              alreadyHaveInstanceConfigured={false}\n              onCancel={this.handleOnCancelCreation}\n              afterSubmit={this.handleAfterSubmit}\n              enforceValidation={true}\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n}\n\nexport default whenLoggedIn(withAppState(CreateProjectPage));\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { A11yContext } from './A11yContext';\n\ninterface Props {\n  anchor: string;\n  label?: string;\n  weight?: number;\n}\n\nexport default function A11ySkipTarget(props: Props) {\n  return (\n    <A11yContext.Consumer>\n      {({ addA11ySkipLink, removeA11ySkipLink }) => (\n        <A11ySkipTargetInner\n          addA11ySkipLink={addA11ySkipLink}\n          removeA11ySkipLink={removeA11ySkipLink}\n          {...props}\n        />\n      )}\n    </A11yContext.Consumer>\n  );\n}\n\ninterface InnerProps {\n  addA11ySkipLink: (link: T.A11ySkipLink) => void;\n  removeA11ySkipLink: (link: T.A11ySkipLink) => void;\n}\n\nexport class A11ySkipTargetInner extends React.PureComponent<Props & InnerProps> {\n  componentDidMount() {\n    this.props.addA11ySkipLink(this.getLink());\n  }\n\n  componentWillUnmount() {\n    this.props.removeA11ySkipLink(this.getLink());\n  }\n\n  getLink = (): T.A11ySkipLink => {\n    const { anchor: key, label = translate('skip_to_content'), weight } = this.props;\n    return { key, label, weight };\n  };\n\n  render() {\n    const { anchor } = this.props;\n    return <span id={`a11y_target__${anchor}`} />;\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport handleRequiredAuthentication from 'sonar-ui-common/helpers/handleRequiredAuthentication';\nimport { isLoggedIn } from '../../helpers/users';\nimport { getWrappedDisplayName } from './utils';\nimport { withCurrentUser } from './withCurrentUser';\n\nexport function whenLoggedIn<P>(WrappedComponent: React.ComponentType<P>) {\n  class Wrapper extends React.Component<P & { currentUser: T.CurrentUser }> {\n    static displayName = getWrappedDisplayName(WrappedComponent, 'whenLoggedIn');\n\n    componentDidMount() {\n      if (!isLoggedIn(this.props.currentUser)) {\n        handleRequiredAuthentication();\n      }\n    }\n\n    render() {\n      if (isLoggedIn(this.props.currentUser)) {\n        return <WrappedComponent {...this.props} />;\n      } else {\n        return null;\n      }\n    }\n  }\n\n  return withCurrentUser(Wrapper);\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as classNames from 'classnames';\nimport * as React from 'react';\nimport ValidationInput from 'sonar-ui-common/components/controls/ValidationInput';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { PROJECT_KEY_MAX_LEN } from '../../helpers/constants';\n\nexport interface ProjectKeyInputProps {\n  error?: string;\n  help?: string;\n  label?: string;\n  onProjectKeyChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  placeholder?: string;\n  projectKey?: string;\n  touched: boolean;\n  validating?: boolean;\n  autofocus?: boolean;\n}\n\nexport default function ProjectKeyInput(props: ProjectKeyInputProps) {\n  const {\n    error,\n    help,\n    label,\n    placeholder,\n    projectKey,\n    touched,\n    validating,\n    autofocus = false\n  } = props;\n\n  const isInvalid = touched && error !== undefined;\n  const isValid = touched && !validating && error === undefined;\n\n  return (\n    <ValidationInput\n      className=\"form-field\"\n      description={translate('onboarding.create_project.project_key.description')}\n      error={error}\n      help={help}\n      id=\"project-key\"\n      isInvalid={isInvalid}\n      isValid={isValid}\n      label={label}\n      required={label !== undefined}>\n      <input\n        autoFocus={autofocus}\n        className={classNames('input-super-large', {\n          'is-invalid': isInvalid,\n          'is-valid': isValid\n        })}\n        id=\"project-key\"\n        maxLength={PROJECT_KEY_MAX_LEN}\n        minLength={1}\n        onChange={props.onProjectKeyChange}\n        placeholder={placeholder}\n        type=\"text\"\n        value={projectKey}\n      />\n    </ValidationInput>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport { ProjectKeyValidationResult } from '../types/component';\nimport { PROJECT_KEY_MAX_LEN } from './constants';\n\n// This is the regex used on the backend:\n//   [\\p{Alnum}\\-_.:]*[\\p{Alpha}\\-_.:]+[\\p{Alnum}\\-_.:]*\n// See sonar-core/src/main/java/org/sonar/core/component/ComponentKeys.java\nexport const PROJECT_KEY_REGEX = /^[\\w\\-.:]*[a-z\\-_.:]+[\\w\\-.:]*$/i;\nexport const PROJECT_KEY_INVALID_CHARACTERS = /[^\\w\\-:.]+/gi;\n\nexport function validateProjectKey(projectKey: string): ProjectKeyValidationResult {\n  if (projectKey.length === 0) {\n    return ProjectKeyValidationResult.Empty;\n  } else if (projectKey.length > PROJECT_KEY_MAX_LEN) {\n    return ProjectKeyValidationResult.TooLong;\n  } else if (PROJECT_KEY_REGEX.test(projectKey)) {\n    return ProjectKeyValidationResult.Valid;\n  } else if (/^[0-9]+$/.test(projectKey)) {\n    return ProjectKeyValidationResult.OnlyDigits;\n  }\n  return ProjectKeyValidationResult.InvalidChar;\n}\n"],"sourceRoot":""}
{"version":3,"sources":["webpack:///./src/main/js/apps/settings/components/almIntegration/AlmBindingDefinitionFormField.tsx","webpack:///./src/main/js/apps/settings/components/almIntegration/AzureForm.tsx","webpack:///./src/main/js/apps/settings/components/almIntegration/BitbucketCloudForm.tsx","webpack:///./src/main/js/apps/settings/components/almIntegration/BitbucketServerForm.tsx","webpack:///./src/main/js/apps/settings/components/almIntegration/BitbucketForm.tsx","webpack:///./src/main/js/apps/settings/components/almIntegration/GithubForm.tsx","webpack:///./src/main/js/apps/settings/components/almIntegration/GitlabForm.tsx","webpack:///./src/main/js/apps/settings/components/almIntegration/AlmBindingDefinitionFormRenderer.tsx","webpack:///./src/main/js/apps/settings/components/almIntegration/AlmBindingDefinitionForm.tsx","webpack:///./src/main/js/api/alm-settings.ts","webpack:///./src/main/js/apps/settings/components/AdditionalCategoryKeys.ts"],"names":["AlmBindingDefinitionFormField","props","autoFocus","help","id","isTextArea","maxLength","optional","overwriteOnly","propKey","value","showField","setShowField","className","htmlFor","overlay","placement","onClick","onFieldChange","onChange","e","currentTarget","required","rows","name","size","type","AzureForm","formData","key","url","Boolean","personalAccessToken","Alert","variant","defaultMessage","values","link","target","to","Azure","BitbucketCloudForm","example","workspace","clientId","clientSecret","BitbucketServerForm","pat","href","rel","BitbucketForm","isUpdate","onCheck","onVariantChange","options","label","BitbucketServer","BitbucketCloud","undefined","GithubForm","appId","privateKey","GitHub","GitlabForm","GitLab","renderForm","alm","bitbucketVariant","this","onBitbucketVariantChange","alreadyHaveInstanceConfigured","canSubmit","submitting","validationError","header","contentLabel","onRequestClose","onCancel","shouldCloseOnOverlayClick","onSubmit","event","preventDefault","disabled","loading","BINDING_PER_ALM","createApi","updateApi","defaultBinding","super","mounted","handleFieldChange","fieldId","setState","touched","handleFormSubmit","async","enforceValidation","alreadySavedFormData","state","apiAlm","apiMethod","newKey","bindingDefinition","error","afterSubmit","handleOnCancel","handleBitbucketVariantChange","Object","some","v","getAlmDefinitions","getAlmSettings","project","getAlmSettingsNoCatch","catch","then","almSettings","validateAlmSettings","response","status","BadRequest","createGithubConfiguration","data","updateGithubConfiguration","createAzureConfiguration","updateAzureConfiguration","createBitbucketServerConfiguration","updateBitbucketServerConfiguration","createBitbucketCloudConfiguration","updateBitbucketCloudConfiguration","createGitlabConfiguration","updateGitlabConfiguration","deleteConfiguration","countBindedProjects","almSetting","projects","getProjectAlmBinding","deleteProjectAlmBinding","setProjectAzureBinding","setProjectBitbucketBinding","setProjectBitbucketCloudBinding","setProjectGithubBinding","setProjectGitlabBinding","validateProjectAlmBinding","projectKey","ALM_INTEGRATION","ANALYSIS_SCOPE_CATEGORY","LANGUAGES_CATEGORY","NEW_CODE_PERIOD_CATEGORY","PULL_REQUEST_DECORATION_BINDING_CATEGORY"],"mappings":"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","file":"js/13.m.2978d02d.chunk.js","sourcesContent":["/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { ButtonLink } from 'sonar-ui-common/components/controls/buttons';\nimport HelpTooltip from 'sonar-ui-common/components/controls/HelpTooltip';\nimport MandatoryFieldMarker from 'sonar-ui-common/components/ui/MandatoryFieldMarker';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { AlmBindingDefinitionBase } from '../../../../types/alm-settings';\n\nexport interface AlmBindingDefinitionFormFieldProps<B extends AlmBindingDefinitionBase> {\n  autoFocus?: boolean;\n  help?: React.ReactNode;\n  id: string;\n  isTextArea?: boolean;\n  maxLength?: number;\n  onFieldChange: (id: keyof B, value: string) => void;\n  optional?: boolean;\n  overwriteOnly?: boolean;\n  propKey: keyof B;\n  value: string;\n}\n\nexport function AlmBindingDefinitionFormField<B extends AlmBindingDefinitionBase>(\n  props: AlmBindingDefinitionFormFieldProps<B>\n) {\n  const {\n    autoFocus,\n    help,\n    id,\n    isTextArea,\n    maxLength,\n    optional,\n    overwriteOnly = false,\n    propKey,\n    value\n  } = props;\n  const [showField, setShowField] = React.useState(!overwriteOnly);\n\n  return (\n    <div className=\"modal-field\">\n      <label className=\"display-flex-center\" htmlFor={id}>\n        {translate('settings.almintegration.form', id)}\n        {!optional && <MandatoryFieldMarker />}\n        {help && <HelpTooltip className=\"spacer-left\" overlay={help} placement=\"right\" />}\n      </label>\n\n      {!showField && overwriteOnly && (\n        <div>\n          <p>{translate('settings.almintegration.form.secret_field')}</p>\n          <ButtonLink\n            onClick={() => {\n              props.onFieldChange(propKey, '');\n              setShowField(true);\n            }}>\n            {translate('settings.almintegration.form.update_secret_field')}\n          </ButtonLink>\n        </div>\n      )}\n\n      {showField && isTextArea && (\n        <textarea\n          className=\"settings-large-input\"\n          id={id}\n          maxLength={maxLength || 2000}\n          onChange={e => props.onFieldChange(propKey, e.currentTarget.value)}\n          required={!optional}\n          rows={5}\n          value={value}\n        />\n      )}\n\n      {showField && !isTextArea && (\n        <input\n          autoFocus={autoFocus}\n          className=\"input-super-large\"\n          id={id}\n          maxLength={maxLength || 100}\n          name={id}\n          onChange={e => props.onFieldChange(propKey, e.currentTarget.value)}\n          size={50}\n          type=\"text\"\n          value={value}\n        />\n      )}\n    </div>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from 'react-router';\nimport { Alert } from 'sonar-ui-common/components/ui/Alert';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { ALM_DOCUMENTATION_PATHS } from '../../../../helpers/constants';\nimport { AlmKeys, AzureBindingDefinition } from '../../../../types/alm-settings';\nimport { AlmBindingDefinitionFormField } from './AlmBindingDefinitionFormField';\n\nexport interface AzureFormProps {\n  formData: AzureBindingDefinition;\n  onFieldChange: (fieldId: keyof AzureBindingDefinition, value: string) => void;\n}\n\nexport default function AzureForm(props: AzureFormProps) {\n  const { formData, onFieldChange } = props;\n\n  return (\n    <div className=\"display-flex-start\">\n      <div className=\"flex-1\">\n        <AlmBindingDefinitionFormField\n          autoFocus={true}\n          help={translate('settings.almintegration.form.name.azure.help')}\n          id=\"name.azure\"\n          onFieldChange={onFieldChange}\n          propKey=\"key\"\n          value={formData.key}\n        />\n        <AlmBindingDefinitionFormField\n          help={\n            <>\n              {translate('settings.almintegration.form.url.azure.help1')}\n              <br />\n              <em>https://ado.your-company.com/your_collection</em>\n              <br />\n              <br />\n              {translate('settings.almintegration.form.url.azure.help2')}\n              <br />\n              <em>https://dev.azure.com/your_organization</em>\n            </>\n          }\n          id=\"url.azure\"\n          maxLength={2000}\n          onFieldChange={onFieldChange}\n          propKey=\"url\"\n          value={formData.url || ''}\n        />\n        <AlmBindingDefinitionFormField\n          help={translate('settings.almintegration.form.personal_access_token.azure.help')}\n          id=\"personal_access_token\"\n          isTextArea={true}\n          onFieldChange={onFieldChange}\n          overwriteOnly={Boolean(formData.key)}\n          propKey=\"personalAccessToken\"\n          value={formData.personalAccessToken}\n        />\n      </div>\n      <Alert className=\"huge-spacer-left flex-1\" variant=\"info\">\n        <FormattedMessage\n          defaultMessage={translate(`settings.almintegration.azure.info`)}\n          id=\"settings.almintegration.azure.info\"\n          values={{\n            link: (\n              <Link target=\"_blank\" to={ALM_DOCUMENTATION_PATHS[AlmKeys.Azure]}>\n                {translate('learn_more')}\n              </Link>\n            )\n          }}\n        />\n      </Alert>\n    </div>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { BitbucketCloudBindingDefinition } from '../../../../types/alm-settings';\nimport { AlmBindingDefinitionFormField } from './AlmBindingDefinitionFormField';\n\nexport interface BitbucketCloudFormProps {\n  formData: BitbucketCloudBindingDefinition;\n  onFieldChange: (fieldId: keyof BitbucketCloudBindingDefinition, value: string) => void;\n}\n\nexport default function BitbucketCloudForm(props: BitbucketCloudFormProps) {\n  const { formData } = props;\n\n  return (\n    <>\n      <AlmBindingDefinitionFormField\n        autoFocus={true}\n        help={translate('settings.almintegration.form.name.bitbucketcloud.help')}\n        id=\"name.bitbucket\"\n        maxLength={100}\n        onFieldChange={props.onFieldChange}\n        propKey=\"key\"\n        value={formData.key || ''}\n      />\n      <AlmBindingDefinitionFormField\n        help={\n          <FormattedMessage\n            defaultMessage={translate('settings.almintegration.form.workspace.bitbucketcloud.help')}\n            id=\"settings.almintegration.form.workspace.bitbucketcloud.help\"\n            values={{\n              example: (\n                <>\n                  {'https://bitbucket.org/'}\n                  <strong>{'{workspace}'}</strong>\n                  {'/{repository}'}\n                </>\n              )\n            }}\n          />\n        }\n        id=\"workspace.bitbucketcloud\"\n        maxLength={2000}\n        onFieldChange={props.onFieldChange}\n        propKey=\"workspace\"\n        value={formData.workspace || ''}\n      />\n      <AlmBindingDefinitionFormField\n        id=\"client_id.bitbucketcloud\"\n        help={translate('settings.almintegration.form.oauth_key.bitbucketcloud.help')}\n        onFieldChange={props.onFieldChange}\n        propKey=\"clientId\"\n        value={formData.clientId || ''}\n      />\n      <AlmBindingDefinitionFormField\n        id=\"client_secret.bitbucketcloud\"\n        help={translate('settings.almintegration.form.oauth_secret.bitbucketcloud.help')}\n        onFieldChange={props.onFieldChange}\n        overwriteOnly={Boolean(formData.key)}\n        propKey=\"clientSecret\"\n        value={formData.clientSecret || ''}\n      />\n    </>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { BitbucketServerBindingDefinition } from '../../../../types/alm-settings';\nimport { AlmBindingDefinitionFormField } from './AlmBindingDefinitionFormField';\n\nexport interface BitbucketServerFormProps {\n  formData: BitbucketServerBindingDefinition;\n  onFieldChange: (fieldId: keyof BitbucketServerBindingDefinition, value: string) => void;\n}\n\nexport default function BitbucketServerForm(props: BitbucketServerFormProps) {\n  const { formData } = props;\n\n  return (\n    <>\n      {' '}\n      <AlmBindingDefinitionFormField\n        autoFocus={true}\n        help={translate('settings.almintegration.form.name.bitbucket.help')}\n        id=\"name.bitbucket\"\n        maxLength={100}\n        onFieldChange={props.onFieldChange}\n        propKey=\"key\"\n        value={formData.key || ''}\n      />\n      <AlmBindingDefinitionFormField\n        help={\n          <FormattedMessage\n            defaultMessage={translate('settings.almintegration.form.url.bitbucket.help')}\n            id=\"settings.almintegration.form.url.bitbucket.help\"\n            values={{ example: 'https://bitbucket-server.your-company.com' }}\n          />\n        }\n        id=\"url.bitbucket\"\n        maxLength={2000}\n        onFieldChange={props.onFieldChange}\n        propKey=\"url\"\n        value={formData.url || ''}\n      />\n      <AlmBindingDefinitionFormField\n        id=\"personal_access_token\"\n        help={\n          <FormattedMessage\n            defaultMessage={translate(\n              'settings.almintegration.form.personal_access_token.bitbucket.help'\n            )}\n            id=\"settings.almintegration.form.personal_access_token.bitbucket.help\"\n            values={{\n              pat: (\n                <a\n                  href=\"https://confluence.atlassian.com/bitbucketserver0515/personal-access-tokens-961275199.html\"\n                  rel=\"noopener noreferrer\"\n                  target=\"_blank\">\n                  {translate(\n                    'settings.almintegration.form.personal_access_token.bitbucket.help.url'\n                  )}\n                </a>\n              )\n            }}\n          />\n        }\n        isTextArea={true}\n        onFieldChange={props.onFieldChange}\n        overwriteOnly={Boolean(formData.key)}\n        propKey=\"personalAccessToken\"\n        value={formData.personalAccessToken || ''}\n      />\n    </>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from 'react-router';\nimport RadioToggle from 'sonar-ui-common/components/controls/RadioToggle';\nimport { Alert } from 'sonar-ui-common/components/ui/Alert';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { ALM_DOCUMENTATION_PATHS } from '../../../../helpers/constants';\nimport {\n  AlmKeys,\n  BitbucketCloudBindingDefinition,\n  BitbucketServerBindingDefinition\n} from '../../../../types/alm-settings';\nimport BitbucketCloudForm from './BitbucketCloudForm';\nimport BitbucketServerForm from './BitbucketServerForm';\n\nexport interface BitbucketFormProps {\n  formData: BitbucketServerBindingDefinition | BitbucketCloudBindingDefinition;\n  isUpdate: boolean;\n  onFieldChange: (\n    fieldId: keyof (BitbucketServerBindingDefinition & BitbucketCloudBindingDefinition),\n    value: string\n  ) => void;\n  variant?: AlmKeys.BitbucketServer | AlmKeys.BitbucketCloud;\n  onVariantChange: (variant: AlmKeys.BitbucketServer | AlmKeys.BitbucketCloud) => void;\n}\n\nexport default function BitbucketForm(props: BitbucketFormProps) {\n  const { isUpdate, formData, variant } = props;\n\n  return (\n    <>\n      {!isUpdate && (\n        <div className=\"display-flex-column\">\n          <strong>{translate('settings.almintegration.form.choose_bitbucket_variant')}</strong>\n          <RadioToggle\n            className=\"little-spacer-top big-spacer-bottom\"\n            name=\"variant\"\n            onCheck={props.onVariantChange}\n            options={[\n              {\n                label: 'Bitbucket Server',\n                value: AlmKeys.BitbucketServer\n              },\n              { label: 'Bitbucket Cloud', value: AlmKeys.BitbucketCloud }\n            ]}\n            value={variant}\n          />\n        </div>\n      )}\n\n      {variant !== undefined && (\n        <>\n          {variant === AlmKeys.BitbucketServer && (\n            <div className=\"display-flex-start\">\n              <div className=\"flex-1\">\n                <BitbucketServerForm\n                  onFieldChange={props.onFieldChange}\n                  formData={formData as BitbucketServerBindingDefinition}\n                />\n              </div>\n              <Alert className=\"huge-spacer-left flex-1\" variant=\"info\">\n                <>\n                  <h3>{translate('onboarding.create_project.pat_help.title')}</h3>\n\n                  <p className=\"big-spacer-top\">\n                    {translate('settings.almintegration.bitbucket.help_1')}\n                  </p>\n\n                  <ul className=\"big-spacer-top list-styled\">\n                    <li>{translate('settings.almintegration.bitbucket.help_2')}</li>\n                    <li>{translate('settings.almintegration.bitbucket.help_3')}</li>\n                  </ul>\n\n                  <p className=\"big-spacer-top big-spacer-bottom\">\n                    <Link target=\"_blank\" to={ALM_DOCUMENTATION_PATHS[AlmKeys.BitbucketServer]}>\n                      {translate('learn_more')}\n                    </Link>\n                  </p>\n                </>\n              </Alert>\n            </div>\n          )}\n\n          {variant === AlmKeys.BitbucketCloud && (\n            <div className=\"display-flex-start\">\n              <div className=\"flex-1\">\n                <BitbucketCloudForm\n                  onFieldChange={props.onFieldChange}\n                  formData={formData as BitbucketCloudBindingDefinition}\n                />\n              </div>\n              <Alert className=\"huge-spacer-left flex-1\" variant=\"info\">\n                <FormattedMessage\n                  defaultMessage={translate(`settings.almintegration.bitbucketcloud.info`)}\n                  id=\"settings.almintegration.bitbucketcloud.info\"\n                  values={{\n                    link: (\n                      <Link target=\"_blank\" to={ALM_DOCUMENTATION_PATHS[AlmKeys.BitbucketCloud]}>\n                        {translate('learn_more')}\n                      </Link>\n                    )\n                  }}\n                />\n              </Alert>\n            </div>\n          )}\n        </>\n      )}\n    </>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from 'react-router';\nimport { Alert } from 'sonar-ui-common/components/ui/Alert';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { ALM_DOCUMENTATION_PATHS } from '../../../../helpers/constants';\nimport { AlmKeys, GithubBindingDefinition } from '../../../../types/alm-settings';\nimport { AlmBindingDefinitionFormField } from './AlmBindingDefinitionFormField';\n\nexport interface GithubFormProps {\n  formData: GithubBindingDefinition;\n  onFieldChange: (fieldId: keyof GithubBindingDefinition, value: string) => void;\n}\n\nexport default function GithubForm(props: GithubFormProps) {\n  const { formData, onFieldChange } = props;\n\n  return (\n    <div className=\"display-flex-start\">\n      <div className=\"flex-1\">\n        <AlmBindingDefinitionFormField\n          autoFocus={true}\n          help={translate('settings.almintegration.form.name.github.help')}\n          id=\"name.github\"\n          onFieldChange={onFieldChange}\n          propKey=\"key\"\n          value={formData.key}\n        />\n        <AlmBindingDefinitionFormField\n          help={\n            <>\n              {translate('settings.almintegration.form.url.github.help1')}\n              <br />\n              <em>https://github.company.com/api/v3</em>\n              <br />\n              <br />\n              {translate('settings.almintegration.form.url.github.help2')}\n              <br />\n              <em>https://api.github.com/</em>\n            </>\n          }\n          id=\"url.github\"\n          maxLength={2000}\n          onFieldChange={onFieldChange}\n          propKey=\"url\"\n          value={formData.url}\n        />\n        <AlmBindingDefinitionFormField\n          id=\"app_id\"\n          help={translate('settings.almintegration.form.app_id.github.help')}\n          maxLength={80}\n          onFieldChange={onFieldChange}\n          propKey=\"appId\"\n          value={formData.appId}\n        />\n        <AlmBindingDefinitionFormField\n          id=\"client_id.github\"\n          help={translate('settings.almintegration.form.client_id.github.help')}\n          maxLength={80}\n          onFieldChange={onFieldChange}\n          propKey=\"clientId\"\n          value={formData.clientId}\n        />\n        <AlmBindingDefinitionFormField\n          id=\"client_secret.github\"\n          help={translate('settings.almintegration.form.client_secret.github.help')}\n          maxLength={80}\n          onFieldChange={onFieldChange}\n          overwriteOnly={Boolean(formData.key)}\n          propKey=\"clientSecret\"\n          value={formData.clientSecret}\n        />\n        <AlmBindingDefinitionFormField\n          id=\"private_key\"\n          help={translate('settings.almintegration.form.private_key.github.help')}\n          isTextArea={true}\n          onFieldChange={onFieldChange}\n          overwriteOnly={Boolean(formData.key)}\n          propKey=\"privateKey\"\n          value={formData.privateKey}\n        />\n      </div>\n      <Alert className=\"huge-spacer-left flex-1\" variant=\"info\">\n        <FormattedMessage\n          defaultMessage={translate(`settings.almintegration.github.info`)}\n          id=\"settings.almintegration.github.info\"\n          values={{\n            link: (\n              <Link target=\"_blank\" to={ALM_DOCUMENTATION_PATHS[AlmKeys.GitHub]}>\n                {translate('learn_more')}\n              </Link>\n            )\n          }}\n        />\n      </Alert>\n    </div>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from 'react-router';\nimport { Alert } from 'sonar-ui-common/components/ui/Alert';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport { ALM_DOCUMENTATION_PATHS } from '../../../../helpers/constants';\nimport { AlmKeys, GitlabBindingDefinition } from '../../../../types/alm-settings';\nimport { AlmBindingDefinitionFormField } from './AlmBindingDefinitionFormField';\n\nexport interface GitlabFormProps {\n  formData: GitlabBindingDefinition;\n  onFieldChange: (fieldId: keyof GitlabBindingDefinition, value: string) => void;\n}\n\nexport default function GitlabForm(props: GitlabFormProps) {\n  const { formData, onFieldChange } = props;\n\n  return (\n    <div className=\"display-flex-start\">\n      <div className=\"flex-1\">\n        <AlmBindingDefinitionFormField\n          autoFocus={true}\n          help={translate('settings.almintegration.form.name.gitlab.help')}\n          id=\"name.gitlab\"\n          onFieldChange={onFieldChange}\n          propKey=\"key\"\n          value={formData.key}\n        />\n        <AlmBindingDefinitionFormField\n          help={\n            <>\n              {translate('settings.almintegration.form.url.gitlab.help')}\n              <br />\n              <em>https://gitlab.com/api/v4</em>\n            </>\n          }\n          id=\"url.gitlab\"\n          maxLength={2000}\n          onFieldChange={onFieldChange}\n          propKey=\"url\"\n          value={formData.url || ''}\n        />\n        <AlmBindingDefinitionFormField\n          help={translate('settings.almintegration.form.personal_access_token.gitlab.help')}\n          id=\"personal_access_token\"\n          isTextArea={true}\n          onFieldChange={onFieldChange}\n          overwriteOnly={Boolean(formData.key)}\n          propKey=\"personalAccessToken\"\n          value={formData.personalAccessToken}\n        />\n      </div>\n      <Alert className=\"huge-spacer-left flex-1\" variant=\"info\">\n        <FormattedMessage\n          defaultMessage={translate(`settings.almintegration.gitlab.info`)}\n          id=\"settings.almintegration.gitlab.info\"\n          values={{\n            link: (\n              <Link target=\"_blank\" to={ALM_DOCUMENTATION_PATHS[AlmKeys.GitLab]}>\n                {translate('learn_more')}\n              </Link>\n            )\n          }}\n        />\n      </Alert>\n    </div>\n  );\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport { ResetButtonLink, SubmitButton } from 'sonar-ui-common/components/controls/buttons';\nimport Modal from 'sonar-ui-common/components/controls/Modal';\nimport { Alert } from 'sonar-ui-common/components/ui/Alert';\nimport DeferredSpinner from 'sonar-ui-common/components/ui/DeferredSpinner';\nimport { translate } from 'sonar-ui-common/helpers/l10n';\nimport {\n  AlmBindingDefinition,\n  AlmKeys,\n  AzureBindingDefinition,\n  BitbucketCloudBindingDefinition,\n  BitbucketServerBindingDefinition,\n  GithubBindingDefinition,\n  GitlabBindingDefinition\n} from '../../../../types/alm-settings';\nimport AzureForm from './AzureForm';\nimport BitbucketForm from './BitbucketForm';\nimport GithubForm from './GithubForm';\nimport GitlabForm from './GitlabForm';\n\nexport interface AlmBindingDefinitionFormProps {\n  alm: AlmKeys;\n  isUpdate: boolean;\n  canSubmit: boolean;\n  alreadyHaveInstanceConfigured: boolean;\n  onCancel: () => void;\n  onSubmit: () => void;\n  onFieldChange: (fieldId: keyof AlmBindingDefinition, value: string) => void;\n  formData: AlmBindingDefinition;\n  submitting: boolean;\n  bitbucketVariant?: AlmKeys.BitbucketServer | AlmKeys.BitbucketCloud;\n  onBitbucketVariantChange: (\n    bitbucketVariant: AlmKeys.BitbucketServer | AlmKeys.BitbucketCloud\n  ) => void;\n  validationError?: string;\n}\n\nexport default class AlmBindingDefinitionFormRenderer extends React.PureComponent<\n  AlmBindingDefinitionFormProps\n> {\n  renderForm = () => {\n    const { alm, formData, isUpdate, bitbucketVariant } = this.props;\n\n    switch (alm) {\n      case AlmKeys.GitLab:\n        return (\n          <GitlabForm\n            onFieldChange={this.props.onFieldChange}\n            formData={formData as GitlabBindingDefinition}\n          />\n        );\n      case AlmKeys.Azure:\n        return (\n          <AzureForm\n            onFieldChange={this.props.onFieldChange}\n            formData={formData as AzureBindingDefinition}\n          />\n        );\n      case AlmKeys.GitHub:\n        return (\n          <GithubForm\n            onFieldChange={this.props.onFieldChange}\n            formData={formData as GithubBindingDefinition}\n          />\n        );\n      case AlmKeys.BitbucketServer:\n        return (\n          <BitbucketForm\n            onFieldChange={this.props.onFieldChange}\n            formData={\n              formData as BitbucketServerBindingDefinition | BitbucketCloudBindingDefinition\n            }\n            isUpdate={isUpdate}\n            variant={bitbucketVariant}\n            onVariantChange={this.props.onBitbucketVariantChange}\n          />\n        );\n      default:\n        return null;\n    }\n  };\n\n  render() {\n    const {\n      isUpdate,\n      alreadyHaveInstanceConfigured,\n      canSubmit,\n      submitting,\n      validationError\n    } = this.props;\n    const header = translate('settings.almintegration.form.header', isUpdate ? 'edit' : 'create');\n\n    const handleSubmit = (event: React.SyntheticEvent<HTMLFormElement>) => {\n      event.preventDefault();\n      this.props.onSubmit();\n    };\n\n    return (\n      <Modal\n        contentLabel={header}\n        onRequestClose={this.props.onCancel}\n        shouldCloseOnOverlayClick={false}\n        size=\"medium\">\n        <form className=\"views-form\" onSubmit={handleSubmit}>\n          <div className=\"modal-head\">\n            <h2>{header}</h2>\n          </div>\n\n          <div className=\"modal-body modal-container\">\n            {alreadyHaveInstanceConfigured && !isUpdate && (\n              <Alert className=\"big-spacer-bottom\" variant=\"warning\">\n                {translate('settings.almintegration.form.second_instance_warning')}\n              </Alert>\n            )}\n            {this.renderForm()}\n            {validationError && !canSubmit && (\n              <Alert variant=\"error\">\n                <p className=\"spacer-bottom\">\n                  {translate('settings.almintegration.configuration_invalid')}\n                </p>\n                <ul className=\"list-styled\">\n                  <li>{validationError}</li>\n                </ul>\n              </Alert>\n            )}\n          </div>\n\n          <div className=\"modal-foot\">\n            <SubmitButton disabled={!canSubmit || submitting}>\n              {translate('settings.almintegration.form.save')}\n              <DeferredSpinner className=\"spacer-left\" loading={submitting} />\n            </SubmitButton>\n            <ResetButtonLink onClick={this.props.onCancel}>{translate('cancel')}</ResetButtonLink>\n          </div>\n        </form>\n      </Modal>\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport * as React from 'react';\nimport {\n  createAzureConfiguration,\n  createBitbucketCloudConfiguration,\n  createBitbucketServerConfiguration,\n  createGithubConfiguration,\n  createGitlabConfiguration,\n  deleteConfiguration,\n  updateAzureConfiguration,\n  updateBitbucketCloudConfiguration,\n  updateBitbucketServerConfiguration,\n  updateGithubConfiguration,\n  updateGitlabConfiguration,\n  validateAlmSettings\n} from '../../../../api/alm-settings';\nimport {\n  AlmBindingDefinition,\n  AlmBindingDefinitionBase,\n  AlmKeys,\n  AzureBindingDefinition,\n  BitbucketCloudBindingDefinition,\n  BitbucketServerBindingDefinition,\n  GithubBindingDefinition,\n  GitlabBindingDefinition,\n  isBitbucketCloudBindingDefinition\n} from '../../../../types/alm-settings';\nimport AlmBindingDefinitionFormRenderer from './AlmBindingDefinitionFormRenderer';\n\ninterface Props {\n  alm: AlmKeys;\n  bindingDefinition?: AlmBindingDefinition;\n  alreadyHaveInstanceConfigured: boolean;\n  onCancel: () => void;\n  afterSubmit: (data: AlmBindingDefinitionBase) => void;\n  enforceValidation?: boolean;\n}\n\ninterface State {\n  formData: AlmBindingDefinition;\n  touched: boolean;\n  submitting: boolean;\n  bitbucketVariant?: AlmKeys.BitbucketServer | AlmKeys.BitbucketCloud;\n  alreadySavedFormData?: AlmBindingDefinition;\n  validationError?: string;\n}\n\nconst BINDING_PER_ALM = {\n  [AlmKeys.Azure]: {\n    createApi: createAzureConfiguration,\n    updateApi: updateAzureConfiguration,\n    defaultBinding: { key: '', personalAccessToken: '', url: '' } as AzureBindingDefinition\n  },\n  [AlmKeys.GitHub]: {\n    createApi: createGithubConfiguration,\n    updateApi: updateGithubConfiguration,\n    defaultBinding: {\n      key: '',\n      appId: '',\n      clientId: '',\n      clientSecret: '',\n      url: '',\n      privateKey: ''\n    } as GithubBindingDefinition\n  },\n  [AlmKeys.GitLab]: {\n    createApi: createGitlabConfiguration,\n    updateApi: updateGitlabConfiguration,\n    defaultBinding: { key: '', personalAccessToken: '', url: '' } as GitlabBindingDefinition\n  },\n  [AlmKeys.BitbucketServer]: {\n    createApi: createBitbucketServerConfiguration,\n    updateApi: updateBitbucketServerConfiguration,\n    defaultBinding: {\n      key: '',\n      url: '',\n      personalAccessToken: ''\n    } as BitbucketServerBindingDefinition\n  },\n  [AlmKeys.BitbucketCloud]: {\n    createApi: createBitbucketCloudConfiguration,\n    updateApi: updateBitbucketCloudConfiguration,\n    defaultBinding: {\n      key: '',\n      clientId: '',\n      clientSecret: '',\n      workspace: ''\n    } as BitbucketCloudBindingDefinition\n  }\n};\n\nexport default class AlmBindingDefinitionForm extends React.PureComponent<Props, State> {\n  mounted = false;\n  constructor(props: Props) {\n    super(props);\n\n    let bitbucketVariant: AlmKeys.BitbucketServer | AlmKeys.BitbucketCloud | undefined = undefined;\n\n    if (props.bindingDefinition && props.alm === AlmKeys.BitbucketServer) {\n      bitbucketVariant = isBitbucketCloudBindingDefinition(props.bindingDefinition)\n        ? AlmKeys.BitbucketCloud\n        : AlmKeys.BitbucketServer;\n    }\n\n    const alm = bitbucketVariant || props.alm;\n\n    this.state = {\n      formData: props.bindingDefinition ?? BINDING_PER_ALM[alm].defaultBinding,\n      touched: false,\n      submitting: false,\n      bitbucketVariant\n    };\n  }\n\n  componentDidMount() {\n    this.mounted = true;\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  handleFieldChange = (fieldId: string, value: string) => {\n    this.setState(({ formData }) => ({\n      formData: {\n        ...formData,\n        [fieldId]: value\n      },\n      touched: true\n    }));\n  };\n\n  handleFormSubmit = async () => {\n    const { alm, enforceValidation } = this.props;\n    const { formData, bitbucketVariant, alreadySavedFormData, validationError } = this.state;\n    const apiAlm = bitbucketVariant ?? alm;\n\n    let apiMethod;\n\n    if (alreadySavedFormData && validationError) {\n      apiMethod = BINDING_PER_ALM[apiAlm].updateApi({\n        newKey: formData.key,\n        ...formData,\n        key: alreadySavedFormData.key\n      } as any);\n    } else if (this.props.bindingDefinition?.key) {\n      apiMethod = BINDING_PER_ALM[apiAlm].updateApi({\n        newKey: formData.key,\n        ...formData,\n        key: this.props.bindingDefinition.key\n      } as any);\n    } else {\n      apiMethod = BINDING_PER_ALM[apiAlm].createApi({ ...formData } as any);\n    }\n\n    this.setState({ submitting: true });\n\n    try {\n      await apiMethod;\n\n      if (!this.mounted) {\n        return;\n      }\n\n      this.setState({ alreadySavedFormData: formData });\n\n      let error: string | undefined;\n\n      if (enforceValidation) {\n        error = await validateAlmSettings(formData.key);\n      }\n\n      if (!this.mounted) {\n        return;\n      }\n\n      if (error) {\n        this.setState({ validationError: error });\n      } else {\n        this.props.afterSubmit(formData);\n      }\n    } finally {\n      if (this.mounted) {\n        this.setState({ submitting: false, touched: false });\n      }\n    }\n  };\n\n  handleOnCancel = async () => {\n    const { alreadySavedFormData } = this.state;\n\n    if (alreadySavedFormData) {\n      await deleteConfiguration(alreadySavedFormData.key);\n    }\n\n    this.props.onCancel();\n  };\n\n  handleBitbucketVariantChange = (\n    bitbucketVariant: AlmKeys.BitbucketServer | AlmKeys.BitbucketCloud\n  ) => {\n    this.setState({\n      bitbucketVariant,\n      formData: { ...BINDING_PER_ALM[bitbucketVariant].defaultBinding }\n    });\n  };\n\n  canSubmit = () => {\n    const { formData, touched } = this.state;\n\n    return touched && !Object.values(formData).some(v => !v);\n  };\n\n  render() {\n    const { alm, bindingDefinition, alreadyHaveInstanceConfigured } = this.props;\n    const { formData, submitting, bitbucketVariant, validationError } = this.state;\n\n    const isUpdate = !!bindingDefinition;\n\n    return (\n      <AlmBindingDefinitionFormRenderer\n        alm={alm}\n        isUpdate={isUpdate}\n        canSubmit={this.canSubmit()}\n        alreadyHaveInstanceConfigured={alreadyHaveInstanceConfigured}\n        onCancel={this.handleOnCancel}\n        onSubmit={this.handleFormSubmit}\n        onFieldChange={this.handleFieldChange}\n        formData={formData}\n        submitting={submitting}\n        bitbucketVariant={bitbucketVariant}\n        onBitbucketVariantChange={this.handleBitbucketVariantChange}\n        validationError={validationError}\n      />\n    );\n  }\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nimport {\n  get,\n  getJSON,\n  HttpStatus,\n  parseError,\n  parseJSON,\n  post\n} from 'sonar-ui-common/helpers/request';\nimport throwGlobalError from '../app/utils/throwGlobalError';\nimport {\n  AlmSettingsBindingDefinitions,\n  AlmSettingsInstance,\n  AzureBindingDefinition,\n  AzureProjectAlmBindingParams,\n  BitbucketCloudBindingDefinition,\n  BitbucketCloudProjectAlmBindingParams,\n  BitbucketProjectAlmBindingParams,\n  BitbucketServerBindingDefinition,\n  GithubBindingDefinition,\n  GithubProjectAlmBindingParams,\n  GitlabBindingDefinition,\n  GitlabProjectAlmBindingParams,\n  ProjectAlmBindingConfigurationErrors,\n  ProjectAlmBindingResponse\n} from '../types/alm-settings';\n\nexport function getAlmDefinitions(): Promise<AlmSettingsBindingDefinitions> {\n  return getJSON('/api/alm_settings/list_definitions');\n}\n\nexport function getAlmSettings(project?: string): Promise<AlmSettingsInstance[]> {\n  return getAlmSettingsNoCatch(project).catch(throwGlobalError);\n}\n\nexport function getAlmSettingsNoCatch(project?: string): Promise<AlmSettingsInstance[]> {\n  return getJSON('/api/alm_settings/list', { project }).then(({ almSettings }) => almSettings);\n}\n\nexport function validateAlmSettings(key: string): Promise<string> {\n  return get('/api/alm_settings/validate', { key })\n    .then(() => {\n      return '';\n    })\n    .catch((response: Response) => {\n      if (response.status === HttpStatus.BadRequest) {\n        return parseError(response);\n      } else {\n        return throwGlobalError(response);\n      }\n    });\n}\n\nexport function createGithubConfiguration(data: GithubBindingDefinition) {\n  return post('/api/alm_settings/create_github', data).catch(throwGlobalError);\n}\n\nexport function updateGithubConfiguration(data: GithubBindingDefinition & { newKey: string }) {\n  return post('/api/alm_settings/update_github', data).catch(throwGlobalError);\n}\n\nexport function createAzureConfiguration(data: AzureBindingDefinition) {\n  return post('/api/alm_settings/create_azure', data).catch(throwGlobalError);\n}\n\nexport function updateAzureConfiguration(data: AzureBindingDefinition & { newKey: string }) {\n  return post('/api/alm_settings/update_azure', data).catch(throwGlobalError);\n}\n\nexport function createBitbucketServerConfiguration(data: BitbucketServerBindingDefinition) {\n  return post('/api/alm_settings/create_bitbucket', data).catch(throwGlobalError);\n}\n\nexport function updateBitbucketServerConfiguration(\n  data: BitbucketServerBindingDefinition & { newKey: string }\n) {\n  return post('/api/alm_settings/update_bitbucket', data).catch(throwGlobalError);\n}\n\nexport function createBitbucketCloudConfiguration(data: BitbucketCloudBindingDefinition) {\n  return post('/api/alm_settings/create_bitbucketcloud', data).catch(throwGlobalError);\n}\n\nexport function updateBitbucketCloudConfiguration(\n  data: BitbucketCloudBindingDefinition & { newKey: string }\n) {\n  return post('/api/alm_settings/update_bitbucketcloud', data).catch(throwGlobalError);\n}\n\nexport function createGitlabConfiguration(data: GitlabBindingDefinition) {\n  return post('/api/alm_settings/create_gitlab', data).catch(throwGlobalError);\n}\n\nexport function updateGitlabConfiguration(data: GitlabBindingDefinition & { newKey: string }) {\n  return post('/api/alm_settings/update_gitlab', data).catch(throwGlobalError);\n}\n\nexport function deleteConfiguration(key: string) {\n  return post('/api/alm_settings/delete', { key }).catch(throwGlobalError);\n}\n\nexport function countBindedProjects(almSetting: string) {\n  return getJSON('/api/alm_settings/count_binding', { almSetting })\n    .then(({ projects }) => projects)\n    .catch(throwGlobalError);\n}\n\nexport function getProjectAlmBinding(project: string): Promise<ProjectAlmBindingResponse> {\n  return getJSON('/api/alm_settings/get_binding', { project });\n}\n\nexport function deleteProjectAlmBinding(project: string): Promise<void> {\n  return post('/api/alm_settings/delete_binding', { project }).catch(throwGlobalError);\n}\n\nexport function setProjectAzureBinding(data: AzureProjectAlmBindingParams) {\n  return post('/api/alm_settings/set_azure_binding', data).catch(throwGlobalError);\n}\n\nexport function setProjectBitbucketBinding(data: BitbucketProjectAlmBindingParams) {\n  return post('/api/alm_settings/set_bitbucket_binding', data).catch(throwGlobalError);\n}\n\nexport function setProjectBitbucketCloudBinding(data: BitbucketCloudProjectAlmBindingParams) {\n  return post('/api/alm_settings/set_bitbucketcloud_binding', data).catch(throwGlobalError);\n}\n\nexport function setProjectGithubBinding(data: GithubProjectAlmBindingParams) {\n  return post('/api/alm_settings/set_github_binding', data).catch(throwGlobalError);\n}\n\nexport function setProjectGitlabBinding(data: GitlabProjectAlmBindingParams) {\n  return post('/api/alm_settings/set_gitlab_binding', data).catch(throwGlobalError);\n}\n\nexport function validateProjectAlmBinding(\n  projectKey: string\n): Promise<ProjectAlmBindingConfigurationErrors | undefined> {\n  return get('/api/alm_settings/validate_binding', { project: projectKey })\n    .then(() => undefined)\n    .catch((response: Response) => {\n      if (response.status === HttpStatus.BadRequest) {\n        return parseJSON(response);\n      }\n      return throwGlobalError(response);\n    });\n}\n","/*\n * SonarQube\n * Copyright (C) 2009-2021 SonarSource SA\n * mailto:info AT sonarsource DOT com\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\nexport const ALM_INTEGRATION = 'almintegration';\nexport const ANALYSIS_SCOPE_CATEGORY = 'exclusions';\nexport const LANGUAGES_CATEGORY = 'languages';\nexport const NEW_CODE_PERIOD_CATEGORY = 'new_code_period';\nexport const PULL_REQUEST_DECORATION_BINDING_CATEGORY = 'pull_request_decoration_binding';\n"],"sourceRoot":""}